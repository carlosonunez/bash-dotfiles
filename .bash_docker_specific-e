#!/usr/bin/env bash
DOCKER_CHECK_SENTINEL_FILE=/tmp/docker_installation_in_progress
DOCKER_SOCK_PATH_DARWIN="unix://$HOME/.lima/docker.sock"
DOCKER_SOCK_PATH_WINDOWS="tcp://0.0.0.0:2375"
LIMA_MACHINE_NAME=lima_machine
LIMA_MACHINE_PATH="$HOME/src/setup/lima_machine.yaml"

trap "rm -rf $DOCKER_CHECK_SENTINEL_FILE" INT EXIT

is_mac() {
  test "$(get_os_type)" == "Darwin"
}

is_windows_wsl() {
  test -f /etc/lsb_release && grep -q 'Microsoft' /etc/lsb_release
}

is_debian() {
  test -e /etc/debian_release
}

is_redhat() {
  test -e /etc/redhat_release
}

docker_check_mutex_lock() {
  printf $$ >> "$DOCKER_CHECK_SENTINEL_FILE"
}

docker_check_mutex_unlock() {
  rm -f "$DOCKER_CHECK_SENTINEL_FILE"
}

installation_is_locked() {
  random_wait_time=$(bc -l <<< "scale=4 ; ${RANDOM}/32767")
  sleep "$random_wait_time" && test -e "$DOCKER_CHECK_SENTINEL_FILE"
}

get_bash_process_holding_lock() {
  cat "$DOCKER_CHECK_SENTINEL_FILE"
}

remove_dead_install_locks() {
  bash_processes_holding_lock() {
    ps -ef | grep bash | grep -q "$(get_bash_process_holding_lock)"
  }
  if installation_is_locked
  then
    if ! bash_processes_holding_lock
    then
      docker_check_mutex_unlock
    fi
  fi
}

start_docker_vm_darwin() {
  test "$(get_os_type)" == "Darwin" || return 0

  if ! grep -Eq "${LIMA_MACHINE_NAME}[ \t]+Running" < <(limactl list 2>/dev/null)
  then
    if ! grep -Eq "$LIMA_MACHINE_NAME" < <(limactl list > /dev/null)
    then
      >&2 printf "${BYellow}INFO${NC}: Docker VM [$LIMA_MACHINE_NAME] not created; creating now\n"
      limactl start "$LIMA_MACHINE_PATH" --tty=false
    else
      >&2 printf "${BYellow}INFO${NC}: Docker VM [$LIMA_MACHINE_NAME] not started; starting now\n"
      limactl start "$LIMA_MACHINE_NAME"
    fi
  fi
}

remove_dead_install_locks
if installation_is_locked
then
  >&2 printf "${BGreen}INFO:${NC} Docker installation is in progress in another window."
  return 0
fi

docker_check_mutex_lock

if ! which docker &>/dev/null
then
  printf "Installing ${BGreen}docker${NC}\n"
  if is_mac
  then
    brew install docker
    &>/dev/null which limactl || brew install lima
  elif is_debian
  then
    install_application "apt-transport-https ca-certificates curl"
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    sudo add-apt-repository \
       "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
       $(lsb_release -cs) \
       stable"
    sudo apt-get update
    install_application "linux-image-extra-$(uname -r) linux-image-extra-virtual"
    install_application "docker-ce"
  else
    >&2 printf "${BRed}ERROR${NC}: A Docker setup routine hasn't been written for this Linux.\n"
    return 1
  fi
fi

add_user_to_docker_group_if_linux() {
  (is_debian || is_redhat) || return 0
  
  printf "${BYellow}INFO${NC}: Adding your user to the 'docker' group. Password might be needed. \
  Log out then back in to apply these changes.\n"
  sudo usermod -aG docker "$USER"
}

use_docker_compose_pip_instead_of_binary() {
  if $(file $(which docker-compose) | grep -q "Mach-O")
  then
    if test -z "$VIRTUAL_ENV"
    then
      >&2 echo "ERROR: Can't install Docker Compose; install virtualenv first."
      return 1
    fi
    >&2 echo "INFO: Subbing compiled Docker Compose with Python version"
    pip install docker-compose
  fi
}

install_docker_related_bash_completions_if_darwin() {
  _docker_compose() {
    brew link docker-compose-completion &>/dev/null || true
  }

  _docker_cli() {
    if ! test -e $(brew --prefix)/etc/bash_completion.d/docker
    then
      sudo curl -L https://raw.githubusercontent.com/docker/docker-ce/master/components/cli/contrib/completion/bash/docker \
        -o $(brew --prefix)/etc/bash_completion.d/docker
    fi
  }

  _limactl() {
    completion_file="$(brew --prefix)/etc/bash_completion.d/limactl"
    ! test -e "$completion_file" && limactl completion bash > "$completion_file"
  }

  test "$(get_os_type)" == "Darwin" || return 0
  _docker_cli && _docker_compose && _limactl

}

add_user_to_docker_group_if_linux
start_docker_vm_darwin
use_docker_compose_pip_instead_of_binary
install_docker_related_bash_completions_if_darwin

is_mac && export DOCKER_HOST="$DOCKER_SOCK_PATH_DARWIN"
is_windows_wsl && export DOCKER_HOST="$DOCKER_SOCK_PATH_WINDOWS"
docker_check_mutex_unlock
