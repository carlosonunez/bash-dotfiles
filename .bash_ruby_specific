#!/usr/bin/env bash
#vi: set ft=bash:
# Colors are loaded earlier and from elsewhere
# shellcheck disable=SC2154
source "$HOME/.bash_functions"

RUBY_CHECK_SENTINEL_FILE=/tmp/ruby_installation_in_progress
RUBY_VERSION_TO_USE="3.1.0"
RUBY_GEMFILE="$HOME/.config/ruby/Gemfile"

ruby_check_mutex_lock() {
  echo -ne $$ >> "$RUBY_CHECK_SENTINEL_FILE"
}

ruby_check_mutex_unlock() {
  rm -f "$RUBY_CHECK_SENTINEL_FILE"
}

installation_is_locked() {
  random_wait_time=$(bc -l <<< "scale=4 ; ${RANDOM}/32767")
  sleep "$random_wait_time" && test -e "$RUBY_CHECK_SENTINEL_FILE"
}

get_bash_process_holding_lock() {
  cat "$RUBY_CHECK_SENTINEL_FILE"
}

remove_dead_install_locks() {
  bash_processes_holding_lock() {
    pgrep -q "$(get_bash_process_holding_lock)"
  }
  if installation_is_locked
  then
    if ! bash_processes_holding_lock
    then
      ruby_check_mutex_unlock
    fi
  fi
}


install_rvm() {
  if ! rvm --version &>/dev/null
  then
    log_info "Installing RVM; please hang on."
    \curl -sSL https://get.rvm.io | bash -s stable --ruby
  fi
}

configure_rvm_defaults() {
  _rvm_install_arm() {
    export PKG_CONFIG_PATH="/opt/homebrew/opt/libffi/lib/pkgconfig"
    directory="$HOME/.rvm/src/ruby-${RUBY_VERSION_TO_USE}"
    patched_config_sub_uri="https://raw.githubusercontent.com/carlosonunez/pynacl/57037960e3f2f1796344d02e63d316df08ffc6d3/src/libsodium/build-aux/config.sub"
    rvm fetch "${RUBY_VERSION_TO_USE}" &&
      curl -LsS --connect-timeout 3 -o "${directory}/tool/config.sub.updated" "$patched_config_sub_uri" &&
      ( diff -Naur "${directory}/tool/config.sub" \
        "${directory}/tool/config.sub.updated" > /tmp/diff || true ) &&
      LDFLAGS="-L/opt/homebrew/opt/libffi/lib" CPPFLAGS="-I/opt/homebrew/opt/libffi/include" \
        rvm install "${RUBY_VERSION_TO_USE}" --patch /tmp/diff%0 &&
        rm -f /tmp/diff
  }
  _rvm_install() {
    if test "$(get_os_type)" == "Darwin" && test "$(uname -p)" == "arm64"
    then
        _rvm_install_arm
    else
      rvm install "${RUBY_VERSION_TO_USE}"
    fi
  }
  _configure_arm_compat_libffi_if_necessary() {
    if test "$(get_os_type)" == "Darwin" && \
      test "$(uname -p)" == "arm64" && \
      ! test -e "/opt/homebrew/opt/libffi" 
    then
      log_info "Detected ARM CPU. Installing libffi first."
      brew install libffi
    fi
  }
  if ! test -d "$HOME/.rvm/rubies/$( ruby --version 2>/dev/null | grep -q "$RUBY_VERSION_TO_USE" )"
  then
    log_info "Installing Ruby ${RUBY_VERSION_TO_USE}..."
    _configure_arm_compat_libffi_if_necessary
  fi
}

install_bundler() {
  which bundle &> /dev/null || gem install bundler
}

install_gems()  {
  if ! test -L "$RUBY_GEMFILE"
  then
    rm -f "$RUBY_GEMFILE" &&
      mkdir -p "$(dirname "$RUBY_GEMFILE")" &&
      ln -s "$HOME/src/setup/Gemfile" "$RUBY_GEMFILE"
  fi
  if ! nc -w 1 rubygems.org 443
  then
    log_warning "No internet connection detected or connection is slow. \
System Ruby gems will not be updated."
  else
    bundle install --gemfile="$RUBY_GEMFILE" --quiet --jobs=10
  fi
}

install_ruby_version() {
  grep -iq "ruby-$1" <<< "$(rvm list rubies)" && return 0

  log_info "Installing ruby $1 via rvm"
  rvm autolibs disable
  export RUBY_CFLAGS=-DUSE_FFI_CLOSURE_ALLOC
  export optflags="-Wno-error=implicit-function-declaration"
  export PATH="$(brew --prefix)/opt/openssl@3.2/bin:$PATH"
  export LDFLAGS="-L$(brew --prefix)/opt/openssl@3.2/lib"
  export CPPFLAGS="-I$(brew --prefix)/opt/openssl@3.2/include"
  export PKG_CONFIG_PATH="$(brew --prefix)/opt/openssl@3.2/lib/pkgconfig"
  rvm install "$1" --with-openssl-dir="$(brew --prefix)/opt/openssl@3.2"
}

remove_dead_install_locks
if installation_is_locked
then
  log_info "Ruby installation in progress in another window."
fi
ruby_check_mutex_lock
trap 'rc=$?; ruby_check_mutex_unlock; exit $rc' INT HUP EXIT

source "$HOME/.rvm/scripts/rvm"
export PATH="$HOME/.rvm/gems/ruby-$RUBY_VERSION_TO_USE/bin:$PATH"
install_rvm || return 1
install_ruby_version "$RUBY_VERSION_TO_USE" || return 1
rvm rvmrc warning ignore "$HOME/src/setup/.rvmrc"
rvm rvmrc warning ignore "$HOME/.rvmrc"
rvm --default use "$RUBY_VERSION_TO_USE"
configure_rvm_defaults
install_bundler &&
install_gems &&
ruby_check_mutex_unlock
trap '-' INT HUP EXIT
