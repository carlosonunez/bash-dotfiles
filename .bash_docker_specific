#!/usr/bin/env bash
DOCKER_MACHINE_NAME_TO_USE=docker
if ! which docker &>/dev/null
then
  printf "Installing ${BGreen}docker${NC}\n"
  if test "$(get_os_type)" != "Darwin"
  then
    if grep -q 'Microsoft' /etc/lsb_release
    then
      printf "${BYellow}INFO${NC}: Connecting Docker-Windows engine to native Linux session\n"
      export DOCKER_HOST=tcp://0.0.0.0:2375
    else
      install_application "apt-transport-https ca-certificates curl"
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      sudo add-apt-repository \
         "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
         $(lsb_release -cs) \
         stable"
      sudo apt-get update
      install_application "linux-image-extra-$(uname -r) linux-image-extra-virtual"
      install_application "docker-ce"
    fi
  fi
fi

if test "$DOCKER_MACHINE_NAME" != "$DOCKER_MACHINE_NAME_TO_USE"
then
  >&2 echo "INFO: Creating and starting a new Docker machine." &&
  docker-machine create --engine-insecure-registry "10.0.2.2:5000" --driver virtualbox "$DOCKER_MACHINE_NAME_TO_USE"; \
  eval $(docker-machine env "$DOCKER_MACHINE_NAME_TO_USE") &&
  docker-machine start "$DOCKER_MACHINE_NAME_TO_USE"
fi

# Always ensure that we are using OS X keychain for Docker
if [ "$(get_os_type)" == "Darwin" ]
then
  /usr/bin/sed -i "" 's/desktop/osxkeychain/' "$HOME/.docker/config.json"
fi

if [ "$(get_os_type)" != "Darwin" ] && ! $(id | grep -q "docker")
then
  printf "${BYellow}INFO${NC}: Adding your user to the 'docker' group. Password might be needed. \
  Log out then back in to apply these changes.\n"
  sudo usermod -aG docker $USER
fi

if $(file $(which docker-compose) | grep -q "Mach-O")
then
  if ! test -f ~/bin/docker-compose
  then
    >&2 printf "${BRed}ERROR${NC}: Python version of Docker Compose not found. \
You might experience performance issues while using Compose."
    return 0
  fi
  printf "${BYellow}INFO${NC}: Subbing compiled Compose binary with Python version (password \
might be required)\n"
  dc_location=$(which docker-compose)
  sudo rm -f "$dc_location"
  sudo cp ~/bin/docker-compose "$dc_location"
fi
