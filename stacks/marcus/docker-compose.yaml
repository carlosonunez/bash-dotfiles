volumes:
  marcus-secrets: {}
services:
  rclone:
    image: rclone/rclone:1.65.0
    volumes:
      - ./rclone/conf:/config/rclone
      - $HOME/src/marcus-stack:/data:ro
    network_mode: host
    command:
      - rcd
      - --rc-addr
      - "0.0.0.0:7000"
      - --rc-web-gui
      - --rc-web-gui-no-open-browser
  lift-log-sftp-server:
    depends_on:
      lift-log-sftp-server-init:
        condition: service_completed_successfully
      ensure-marcus-restored:
        condition: service_completed_successfully
    image: rclone/rclone:1.65.0
    volumes:
      - marcus-secrets:/secrets
      - ./rclone/conf:/config/rclone:ro
      - $HOME/src/marcus-stack:/data:ro
    network_mode: host
    entrypoint: sh
    command:
      - -c
      - |-
        rclone serve sftp lift-log: --user "$$(cat /secrets/lift-log-sftp-username)" \
          --pass "$$(cat /secrets/lift-log-sftp-password)" \
          --addr 0.0.0.0:20000
  adguard-home:
    depends_on:
      ensure-marcus-restored:
        condition: service_completed_successfully
    image: adguard/adguardhome:v0.107.43
    container_name: adguardhome
    network_mode: host
    volumes:
      - ./adguard-home/workdir:/opt/adguardhome/work
      - ./adguard-home/confdir:/opt/adguardhome/conf
    restart: unless-stopped
  calibre-samba:
    depends_on:
      ensure-marcus-restored:
        condition: service_completed_successfully
    network_mode: host
    image: dperson/samba
    container_name: calibre-dropbox
    volumes:
      - "./calibre-config/Calibre Library:/books"
      - "./calibre-config/calibre-bookdrop:/book-drop"
    command:
      - -p
      - -u
      - "admin;supersecret"
      - -s
      - "book-library;/books;yes;yes;yes;none;;Books managed by Calibre"
      - -s
      - "book-drop;/book-drop;yes;no;no;admin;admin;Books to be converted into ePUBs"
  calibre-server:
    depends_on:
      ensure-marcus-restored:
        condition: service_completed_successfully
    network_mode: host
    image: linuxserver/calibre:7.18.0
    container_name: calibre
    security_opt:
      - seccomp=unconfined
    volumes:
      - ./calibre-config:/config
    environment:
      CUSTOM_PORT: "8089"
      CUSTOM_HTTPS_PORT: "8189"
      PUID: "1000"
      PGID: "1000"
      NO_DECOR: 1
      TITLE: Calibre
  calibre-web:
    depends_on:
      ensure-marcus-restored:
        condition: service_completed_successfully
    network_mode: host
    image: lscr.io/linuxserver/calibre-web:0.6.23
    container_name: calibre-web
    environment:
      OAUTHLIB_RELAX_TOKEN_SCOPE: "1"
      DOCKER_MODS: "linuxserver/mods:universal-calibre"
    volumes:
      - "./calibre-config/Calibre Library:/books"
      - ./calibre-web-config:/config
  home-assistant:
    depends_on:
      ensure-marcus-restored:
        condition: service_completed_successfully
      mqtt-broker:
        condition: service_started
      ring-mqtt:
        condition: service_started
      scrypted-ring:
        condition: service_started
    image: ghcr.io/home-assistant/home-assistant:stable
    privileged: true
    container_name: homeassistant
    restart: unless-stopped
    network_mode: host
    volumes:
      - ./home-assistant/config:/config
      - /etc/localtime:/etc/localtime:ro
    environment:
      TZ: America/Chicago
  # Mosquitto is a simple MQTT broker that works well
  # within Docker.
  mqtt-broker:
    depends_on:
      ensure-marcus-restored:
        condition: service_completed_successfully
    image: eclipse-mosquitto
    container_name: mqtt-broker
    network_mode: host
    restart: unless-stopped
    volumes:
      - $PWD/home-assistant/add-on-config/mosquitto:/mosquitto/config
  # Ring-MQTT exposes Ring Alarm devices to Home Assistant
  # via MQTT.
  ring-mqtt:
    depends_on:
      ensure-marcus-restored:
        condition: service_completed_successfully
    depends_on:
      - mqtt-broker
    container_name: ring-mqtt
    restart: unless-stopped
    image: tsightler/ring-mqtt
    network_mode: host
    volumes:
      - $PWD/home-assistant/add-on-config/ring-mqtt:/data
  scrypted-ring:
    depends_on:
      ensure-marcus-restored:
        condition: service_completed_successfully
    image: koush/scrypted
    container_name: scrypted
    restart: unless-stopped
    network_mode: host
    environment:
      - SCRYPTED_WEBHOOK_UPDATE_AUTHORIZATION=Bearer foobar
      - SCRYPTED_WEBHOOK_UPDATE=https://localhost:10444/v1/update
    volumes:
      - $PWD/home-assistant/.scrypted/volume:/server/volume
      - /var/run/dbus:/var/run/dbus
      - /var/run/avahi-daemon/socket:/var/run/avahi-daemon/socket
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"
    labels:
      - "com.centurylinklabs.watchtower.scope=scrypted"
  watchtower:
    image: containrrr/watchtower
    restart: unless-stopped
    command: --interval 3600 --cleanup --scope scrypted
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "com.centurylinklabs.watchtower.scope=scrypted"
    ports:
      - 10444:8080
    environment:
      - WATCHTOWER_HTTP_API_TOKEN=foobar
      - WATCHTOWER_HTTP_API_UPDATE=true
      - WATCHTOWER_SCOPE=scrypted
      - WATCHTOWER_HTTP_API_PERIODIC_POLLS=true
  rpi-fan:
    container_name: fan
    restart: always
    image: pilotak/rpi-fan
    environment:
      - DESIRED_TEMP=45
      - FAN_PIN=12
      - FAN_PWM_MIN=25
      - FAN_PWM_MAX=100
      - FAN_PWM_FREQ=25
      - P_TEMP=15
      - I_TEMP=0.4
    devices:
      - /dev/gpiomem
  ha-install-integrations:
    image: bitnami/git:2.43.0
    environment:
      HOME_ASSISTANT_FOLDER: /work
    working_dir: /work
    volumes:
      - $PWD/home-assistant:/work
    entrypoint:
      - bash
    command:
      - ./stack.start
  lift-log-sftp-server-init:
    image: bash:5
    volumes:
      - marcus-secrets:/secrets
    command:
      - -c
      - |-
        if ! { test -f /secrets/lift-log-sftp-username && test -f /secrets/lift-log-sftp-password; }
        then
          tr -dc 'a-z0-9' < /dev/urandom | head -c 8 > /secrets/lift-log-sftp-username
          tr -dc 'a-z0-9' < /dev/urandom | head -c 8 > /secrets/lift-log-sftp-password
        fi
        >&2 echo "Username: $$(cat /secrets/lift-log-sftp-username), Password: $$(cat /secrets/lift-log-sftp-password)"
  backup-marcus-stack:
    image: bash:5
    volumes:
      - $PWD:/app
    working_dir: /app
    command:
      - -c
      - |
          ts=$(date +%s)
          tar -cvzf /tmp/marcus-backup-$ts.tar.gz -C /data adguard* \
            add-on* \
            calibre* \
            home-assistant
          rclone sync /tmp/marcus-backup-$ts.tar.gz marcus-google-drive:Backups/marcus -L -v
          rclone sync /tmp/marcus-backup-latest.tar.gz marcus-google-drive:Backups/marcus -L -v
  restore-marcus-stack:
    image: bash:5
    volumes:
      - $PWD:/app
    working_dir: /app
    command:
      - -c
      - |-
        test -f .restored && exit 0
        rclone sync marcus-google-drive:Backups/marcus -L -v /tmp/marcus-last-backup.tar.gz &&
        tar -xvzf /tmp/marcus-last-backup.tar.gz -C . &&
        touch .restored
  ensure-marcus-restored:
    image: bash:5
    volumes:
      - $PWD:/app
    working_dir: /app
    environment:
      - MARCUS_RESTORE_WAIT_TIME_SECS=600
    command:
      - -c
      - |-
        attempts=0
        while test "$$attempts" -lt "$$MARCUS_RESTORE_WAIT_TIME_SECS"
        do
          test -f /app/.restored && break
          >&2 echo "INFO: Waiting for Marcus restore to complete; attempt $$((attempts+1))/$$MARCUS_RESTORE_WAIT_TIME_SECS"
          attempts=$$((attempts+1))
          sleep 1
        done
        test -f /app/.restored && exit 0
        >&2 echo "ERROR: Restore failed"
        exit 1
