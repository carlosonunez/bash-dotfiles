#!/usr/bin/env bash
trap "rm -f $INSTALL_LOCK_FILE" INT

APPLE_WATCH_PAMID_LIBPATH=/usr/local/lib/pam/pam_watchid.so.2
APPLE_WATCH_PAMID_URL=https://github.com/biscuitehh/pam-watchid
APPLE_WATCH_PAMID_PATH=$HOME/src/pamid-applewatch
INSTALL_LOCK_FILE="$HOME/.bash_install_lock"
# Update our OBS settings.
OBS_PREFS_OP_KEY="OBS Settings"
OBS_PREFS_SENTINEL_FILE="$HOME/.config/setup/obs_has_been_setup"
DISABLE_OBS_PREFS_CHECK="${DISABLE_OBS_PREFS_CHECK:-false}" # Should we disable updating /etc/hosts?
FORCE_OBS_PREFS_UPDATE="${FORCE_OBS_PREFS_UPDATE:-false}" # Should we update our /etc/hosts anyway?
OBS_PREFS_TIMESTAMP_FILE="$HOME/.config/obs-prefs-updater/timestamp"
MAX_OBS_PREFS_STALENESS_DAYS=5 # How current should /etc/hosts be?
# Update our local /etc/hosts file to disable tracking, telemetry, and ads.
# Sourced from firebog.net
DISABLE_ADFREE_CHECK="${DISABLE_ADFREE_CHECK:-false}" # Should we disable updating /etc/hosts?
FORCE_ADFREE_UPDATE="${FORCE_ADFREE_UPDATE:-false}" # Should we update our /etc/hosts anyway?
ADFREE_TIMESTAMP_FILE="$HOME/.config/adfree-etchosts/timestamp"
MAX_AD_FREE_STALENESS_DAYS=5 # How current should /etc/hosts be?
ADFREE_ETC_HOSTS_LISTS=$(cat <<-LISTS
http://sbc.io/hosts/alternates/fakenews-gambling-porn-social/hosts
LISTS
)
HOMEBREW_BUILTINS_X86=$(cat <<-APPS
vagrant
virtualbox
APPS
)
HOMEBREW_BUILTINS=$(cat <<-APPS
1password
1password-cli
alfred
android-platform-tools
authy
awscli
azure-cli
bash-completion
bartender
bats
homebrew/cask/brightness
homebrew/cask/docker
witch
colordiff
coreutils
curl
direnv
homebrew/cask/docker
docker-compose-completion
feh
findutils
firefox
font-dejavu-sans-mono-nerd-font
gawk
gh
git
gnu-getopt
gnu-indent
gnu-sed
gnu-tar
gnutls
googler
grep
htop
imagemagick
iterm2
jq
keyboardcleantool
make
mas
reattach-to-user-namespace
ruby
scrcpy
shellcheck
shiftit
tmux
todo-txt
tree
vim
vlc
w3m
xquartz
zoom
APPS
)
APPLE_APP_STORE_APPS=$(cat <<-APPS
Spark
Shush
APPS
)
ETC_HOSTS_EXCLUSIONS=$(cat <<-EXCLUSIONS
.*\.whatsapp\.com
.*\.whatsapp\.net
twitter\.com
t\.co
www\.t\.co
.*\.twimg\.com
www\.linkedin\.com
engineering\.linkedin\.com
linkedin\.com
api\.twitter\.com
.*reddit\.com
v\.redd\.it
amp-reddit-com\.cdn\.ampproject\.org
www\.redditstatic\.com
i\.reddit\.com
i\.redd\.it
preview\.redd\.it
mmg\.whatsapp\.net
reddit\.map\.fastly\.net
preview\.redd\.it
media\.licdn\.com
mmg-fna\.whatsapp\.net
analytics\.google\.com
static\.licdn\.com
www\.licdn\.com
dynatrace\.com
EXCLUSIONS
)
ETC_HOSTS_INCLUSIONS=$(cat <<-ETC_HOSTS_INCLUSIONS
ads\.linkedin\.com
ETC_HOSTS_INCLUSIONS
)
FERMATA_URL="https://github.com/iccir/Fermata/releases/download/Fermata-136/Fermata-136.zip"

check_for_internet_access() {
  test "$(curl -s --connect-timeout 3 http://nil.carlosnunez.me)" == "i love socks."
}

get_homebrew_builtins() { brew list --formula | tr '\t' '\n'; }
get_app_store_apps() { mas list | sed -E 's/^[0-9]+ (.*) \(.*$/\1/'; }

install_if_missing() {
  app_to_find="$1"
  installed_apps="$2"
  install_command="$3"
  apps="${@:4}"
  for app in $apps
  do
    if ! $(echo "$installed_apps" | grep -q "$app")
    then
      printf "${BGreen}INFO${NC}: Installing app: ${BGreen}$app${NC}\n"
      eval "$install_command $app"
    fi
  done
}

is_apple_m1_cpu() {
  grep -iq 'arm' <<< "$(uname -p)"
}

install_homebrew_builtins() {
  # TECH NOTE: There isn't an option to hide warnings because the Homebrew
  # developers don't think that it's necessary, which is sad.
  # https://github.com/Homebrew/brew/issues/2351
  apps="$(echo "$HOMEBREW_BUILTINS" | tr '\n' ' ')"
  if is_apple_m1_cpu
  then
    >&2 printf "${BCyan}WARNING${NC}: You appear to be using a MacBook with an \
Apple M1 CPU. Install Rosetta first in order to install these apps: \
$(echo "${HOMEBREW_BUILTINS_X86}" | tr '\n' ' ')\n"
  else
    apps="${apps} $(echo "$HOMEBREW_BUILTINS_X86" | tr '\n' ' ')"
  fi
  2>&1 brew install $apps | \
    grep --line-buffered --color=always \
    -Ev "(Downloading|Already downloaded|already installed|brew reinstall|To reinstall|To re-install)" | \
    grep -Ev '^$'
}

install_app_store_apps() {
  if &>/dev/null mas account
  then
    install_if_missing "$pkg" "$(get_app_store_apps)" "mas lucky" $APPLE_APP_STORE_APPS
  else
    formatted_apps=$(echo "$APPLE_APP_STORE_APPS" | tr '\n' ' ')
    >&2 printf "${BCyan}WARNING${NC}: You are not signed in to the App Store. \
Sign in to install these apps: $formatted_apps\n"
  fi
}

modify_etc_hosts() {
  index=0
  inclusions=$(echo "$ETC_HOSTS_INCLUSIONS" | tr '\n' '|' | head -c -1)
  for exclusion in $ETC_HOSTS_EXCLUSIONS
  do
    exclusion_pretty_print="$(echo "$exclusion" | sed 's/\\././g')"
    pattern="^0.0.0.0 $exclusion$"
    if echo "$pattern" | grep -Eq "$inclusions"
    then
      message="INFO: Leaving in /etc/hosts - $exclusion_pretty_print"
      continue
    elif grep -Eq "$pattern" /etc/hosts
    then
      message="INFO: Removing from /etc/hosts - $exclusion_pretty_print"
      if test "$index" -eq 0
      then
        message="${message} (you might need to enter your password)"
      fi
      >&2 echo "$message"
      sudo gsed -i "/$pattern/d" /etc/hosts
      index=$((index+1))
    fi
  done
}

make_etc_hosts_adfree() {
  _write_last_updated_timestamp() {
    test -d "$(dirname "$ADFREE_TIMESTAMP_FILE")" || mkdir "$(dirname "$ADFREE_TIMESTAMP_FILE")"
    date +%s > "$ADFREE_TIMESTAMP_FILE"
  }

  _get_last_updated_timestamp() {
    test -f "$ADFREE_TIMESTAMP_FILE" &&
      cat "$ADFREE_TIMESTAMP_FILE" ||
      printf '0'
  }

  _etc_hosts_updated_recently() {
    test "$(_get_last_updated_timestamp)" != "0" && \
      test "$(_get_last_updated_timestamp)" -lt "$(date +%s -d "+$MAX_AD_FREE_STALENESS_DAYS days")"
  }

  _etc_hosts_updating_disabled() {
    grep -Eiq "^true$" <<< "$DISABLE_ADFREE_CHECK"
  }

  _force() {
    grep -Eiq "^true$" <<< "$FORCE_ADFREE_UPDATE"
  }

  if _force || ( ! _etc_hosts_updating_disabled && ! _etc_hosts_updated_recently )
  then
    >&2 echo "INFO: It's been over $MAX_AD_FREE_STALENESS_DAYS days since /etc/hosts \
has been updated with ad-free extensions. Updating it now."
    >&2 echo "INFO: Set DISABLE_ADFREE_CHECK to 'true' to disable this behavior."
    for list_uri in $ADFREE_ETC_HOSTS_LISTS
    do
      >&2 echo "   --> List: ${list_uri}"
      curl -o /tmp/etc_hosts -L "$list_uri" &&
        sudo sh -c 'cat /tmp/etc_hosts >> /etc/hosts' &&
        rm -f /tmp/etc_hosts
    done
    _write_last_updated_timestamp
  fi
}

install_witch_prefs() {
  cp ~/src/setup/com.manytricks.witchdaemon.plist ~/Library/Preferences
}

install_shiftit_prefs() {
  defaults import org.shiftitapp.ShiftIt $HOME/src/setup/shiftit.plist
}

set_vnc_shiftit_prefs() {
  killall ShiftIt &&
    defaults import org.shiftitapp.ShiftIt $HOME/src/setup/shiftit-vnc.plist &&
    open /Applications/ShiftIt.app
}

set_regular_shiftit_prefs() {
  killall ShiftIt &&
    defaults import org.shiftitapp.ShiftIt $HOME/src/setup/shiftit.plist &&
    open /Applications/ShiftIt.app
}

configure_todos() {
  if ! test -d $HOME/src/todos
  then
    git clone git@github.carlosnunez.me:carlosonunez/todos.git $HOME/src/todos
  fi
}

update_obs_prefs() {
  OBS_PREFS_TMP_FILE="/tmp/obs-studio-prefs.zip"

  _write_last_updated_timestamp() {
    test -d "$(dirname "$OBS_PREFS_TIMESTAMP_FILE")" || mkdir "$(dirname "$OBS_PREFS_TIMESTAMP_FILE")"
    date +%s > "$OBS_PREFS_TIMESTAMP_FILE"
  }

  _get_last_updated_timestamp() {
    test -f "$OBS_PREFS_TIMESTAMP_FILE" &&
      cat "$OBS_PREFS_TIMESTAMP_FILE" ||
      printf '0'
  }

  _obs_prefs_updated_recently() {
    test "$(_get_last_updated_timestamp)" != "0" && \
      test "$(_get_last_updated_timestamp)" -lt "$(date +%s -d "+$MAX_AD_FREE_STALENESS_DAYS days")"
  }

  _obs_prefs_updating_disabled() {
    grep -Eiq "^true$" <<< "$DISABLE_OBS_PREFS_CHECK"
  }

  _force() {
    grep -Eiq "^true$" <<< "$FORCE_OBS_PREFS_UPDATE"
  }

  _download_and_unzip_obs_prefs() {
    op get document --vault "$OP_DEFAULT_VAULT" "$OBS_PREFS_OP_KEY" >  "$OBS_PREFS_TMP_FILE" &&
      unzip -d "${HOME}/Library/Application Support" "$OBS_PREFS_TMP_FILE" &&
      rm "$OBS_PREFS_TMP_FILE"
  }

  _zip_and_upload_obs_prefs() {
    pushd "${HOME}/Library/Application Support" &&
      zip -q -r "$OBS_PREFS_TMP_FILE" obs-studio &&
      popd
    existing=$(op list documents --vault "$OP_DEFAULT_VAULT" | \
      jq -r '.[].overview.title' | \
      grep "$OBS_PREFS_OP_KEY")
    if test -z "$existing"
    then
      >&2 echo "INFO: OBS settings not found in 1Password. Creating it now."
      op create document --vault "$OP_DEFAULT_VAULT" \
        --title "$OBS_PREFS_OP_KEY" \
        "$OBS_PREFS_TMP_FILE"
    else
      op edit document --vault "$OP_DEFAULT_VAULT" \
        "$OBS_PREFS_OP_KEY" \
        "$OBS_PREFS_TMP_FILE"
    fi
    rm "$OBS_PREFS_TMP_FILE"
  }

  if _force || ( ! _obs_prefs_updating_disabled && ! _obs_prefs_updated_recently )
  then
    >&2 echo "INFO: It's been over $MAX_OBS_PREFS_STALENESS_DAYS days since OBS prefs have \
been updated. Doing that now."
    >&2 echo "INFO: Set DISABLE_OBS_PREFS_CHECK to 'true' to disable this behavior."
    if ! check_for_internet_access
    then
      >&2 echo "ERROR: Internet seems to be down. Do this manually by running '${FUNCNAME[0]}'"
      return 1
    fi
    if ! test -f "$OBS_PREFS_SENTINEL_FILE"
    then
      >&2 echo "INFO: It looks like this is the first time this is being done. \
Zipping and uploading prefs now."
      _download_and_unzip_obs_prefs
      touch "$OBS_PREFS_SENTINEL_FILE"
    else
      _zip_and_upload_obs_prefs
    fi
    _write_last_updated_timestamp
  fi
}


get_ssh_and_aws_keys_from_onepassword() {
  ssh_folder_not_present_or_empty() {
    # TECH NOTE: executing `find` against an empty directory will only
    # yield the directory itself.
    ! test -d "$HOME/.ssh" || test "$(find $HOME/.ssh)" == "$HOME/.ssh"
  }

  download_keys() {
    op get document "SSH and AWS Keys" --vault "$OP_DEFAULT_VAULT" >> $HOME/Downloads/keys.zip
  }

  unzip_keys() {
    unzip -d $HOME/.ssh "$HOME/Downloads/keys.zip"
  }

  permission_keys() {
    grep -Elr "BEGIN (OPENSSH|RSA)" $HOME/.ssh | xargs chmod 600
  }

  remove_downloaded_keys() {
    rm "$HOME/Downloads/keys.zip"
  }

  if ssh_folder_not_present_or_empty
  then
    >&2 echo "INFO: Downloading and configuring SSH and cloud keys."
    download_keys && unzip_keys && permission_keys && remove_downloaded_keys
  fi
}

get_secret_settings_from_onepassword() {
  SECRET_SETTINGS_SENTINEL_FILE="$HOME/.config/setup/secret_settings_downloaded"
  SECRET_SETTINGS_SENTINEL_DIR=$(dirname "$SECRET_SETTINGS_SENTINEL_FILE")

  secret_settings_installed() {
    test -f "$SECRET_SETTINGS_SENTINEL_FILE"
  }

  mark_secret_settings_as_installed() {
    test -d "$SECRET_SETTINGS_SENTINEL_DIR" || mkdir -p "$SECRET_SETTINGS_SENTINEL_DIR"
    touch "$SECRET_SETTINGS_SENTINEL_FILE"
  }

  download_env_settings() {
    op get document "Secret Environment Settings" --vault "$OP_DEFAULT_VAULT" \
      >> $HOME/Downloads/environment.zip
  }

  unzip_env_settings() {
    unzip -d $HOME "$HOME/Downloads/environment.zip"
  }

  remove_downloaded_env_settings() {
    rm "$HOME/Downloads/environment.zip"
  }

  if ! secret_settings_installed
  then
    >&2 echo "INFO: Downloading secret environment settings."
    download_env_settings &&
      unzip_env_settings &&
      remove_downloaded_env_settings &&
      mark_secret_settings_as_installed
  fi
}
get_local_firefox_multi_account_containers() {
  cat "$HOME/.ssh/firefox_mac_regexes" | pbcopy
}

get_firefox_multi_account_containers_from_onepassword() {
  ensure_regexes_not_present() {
    ! test -f "$HOME/.ssh/firefox_mac_regexes"
  }

  download_regexes() {
    op get item "Firefox Multi-Account Container Configuration" \
      --vault "$OP_DEFAULT_VAULT" \
      --fields notesPlain >> $HOME/.ssh/firefox_mac_regexes
  }

  install_regexes() {
    >&2 echo "INFO: Run this command to copy your Firefox Multi-Account Containers settings. \
Click on 'Containerise' then click the pencil and paste: \
'get_local_firefox_multi_account_containers'"
  }

  if ensure_regexes_not_present
  then
    >&2 echo "INFO: Downloading and configuring Firefox Multi-Account Containers."
    download_regexes && install_regexes
  fi
}

update_firefox_multi_account_containers_into_onepassword() {
  prompt_for_containers() {
    >&2 echo "INFO: Add your containers below; press CTRL-d when finished."
    cat
  }
  configure_1password_cli
  containers_string=$(prompt_for_containers)
  if ! test -z "$containers_string"
  then
    >&2 echo "INFO: Updating 1Password."
    op edit item 'Firefox Multi-Account Container Configuration' notesPlain="$containers_string"
  fi
}

installation_is_locked() {
  random_wait_time=$(bc -l <<< "scale=4 ; ${RANDOM}/32767")
  sleep $random_wait_time && test -e "$INSTALL_LOCK_FILE"
}

remove_dead_install_locks() {
  bash_processes_holding_lock() {
    ps -ef | grep bash | grep -q "$(get_bash_process_holding_lock)"
  }
  if installation_is_locked
  then
    if ! bash_processes_holding_lock
    then
      unlock_install
    fi
  fi
}

get_bash_process_holding_lock() {
  cat "$INSTALL_LOCK_FILE"
}

get_tmux_windowpane_holding_lock() {
  tmux list-panes -a -F "#{pane_pid} #{window_name}:#{window_id}-#{pane_id}" | \
    grep "$(get_bash_process_holding_lock)" | \
    cut -f2 -d ' '
}

lock_install() {
  printf $$ > "$INSTALL_LOCK_FILE"
}

unlock_install() {
  rm -f "$INSTALL_LOCK_FILE"
}

install_reddit_cli() {
  if ! tuir --version &>/dev/null
  then
    pip install tuir
  fi
}

tap_caskroom_fonts() {
  if ! brew tap | grep -q "homebrew/cask-fonts"
  then
    brew tap homebrew/cask-fonts
  fi
}
enable_sudo_with_apple_watch_and_touch_id() {
  enable_apple_watch() {
    if ! test -f $APPLE_WATCH_PAMID_LIBPATH
    then
      if ! test -d $APPLE_WATCH_PAMID_PATH
      then
        git clone $APPLE_WATCH_PAMID_URL $APPLE_WATCH_PAMID_PATH
      fi
      >&2 printf "${BGreen}INFO${NC}: Installing Apple Watch sudo extension. Enter your \
password when prompted.\n"
      pushd $APPLE_WATCH_PAMID_PATH && \
        gsed -i 's/x86_64/$(shell uname -m)/' Makefile && \
        sudo make install
    fi
    if ! grep -q "pam_watchid.so" /etc/pam.d/sudo
    then
      >&2 printf "${BGreen}INFO${NC}: Enabling Apple Watch sudo extension. Enter your \
password when prompted.\n"
      sudo gsed -i '1s/^/auth    sufficient      pam_watchid.so    "reason=execute command as root"\n/' \
        /etc/pam.d/sudo
    fi
    popd &>/dev/null
  }
  enable_touchid() {
    if ! grep -q "pam_tid.so" /etc/pam.d/sudo
    then
      >&2 printf "${BGreen}INFO${NC}: Enabling Touch ID sudo extension. Enter your \
password when prompted.\n"
      sudo gsed -i '1s/^/auth    sufficient      pam_tid.so    "reason=execute command as root"\n/' \
        /etc/pam.d/sudo
    fi
  }
  if test "$(get_os_type)" == "Darwin"
  then
    enable_apple_watch && enable_touchid
  fi
}

install_fermata(){ 
  if ! test -d "/Applications/Fermata.app"
  then
    >&2 printf "${BGreen}INFO${NC}: Installing Fermata. Enter your password when prompted.\n"
    curl -Lso /tmp/fermata.zip "$FERMATA_URL" &&
      unzip -q /tmp/fermata.zip -d /tmp &&
      sudo mv /tmp/Fermata.app /Applications &&
      defaults import "$HOME/src/setup/fermata.plist" ~/Library/Preferences/com.iccir.Fermata.plist
  fi
}

mark_first_time_setup_as_complete_if_needed() {
  file="$HOME/.config/setup/first_time_setup_complete"
  if ! test -f "$file"
  then
    test -d "$(dirname "$file")" || mkdir -p "$(dirname "$file")"
    touch "$file"
    >&2 printf "${BGreen}INFO${NC}: First time setup complete. Enjoy your machine!\n"
  fi
}

first_time_setup_done() {
  file="$HOME/.config/setup/first_time_setup_complete"
  test -f "$file"
}

if ! first_time_setup_done
then
  >&2 printf "${BGreen}INFO${NC}: Welcome to the installer! We'll need to configure 1Password \
first so that we can fetch your secret preferences. Your system password will be required. \
Enter it below when prompted.\n"
  if ! configure_1password_cli
  then
    >&2 printf "${BRed}ERROR${NC}: Failed to configure 1Password. This might be because your \
account has two-factor authentication enabled. Run 'source ~/.bash_profile' again, but \
pre-pend this to it: 'ONEPASSWORD_OTP=[YOUR_OTP]'."
    exit 1
  fi
fi

remove_dead_install_locks
if installation_is_locked
then
  >&2 echo -e "${BRed}ERROR${NC}: .bash_install is installing apps in \
tmux window-pane $(get_tmux_windowpane_holding_lock). \
Skipping to post-install."
else
  >&2 printf "${BGreen}INFO${NC}: Checking and/or updating software. This might take a few minutes.\n"
  lock_install
  tap_caskroom_fonts

  # Install a few necessary brew formulae
  # ======================================
  if ! check_for_internet_access
  then
    >&2 echo "WARN: Internet access is not available. We will not attempt to install
  or update apps. To re-attempt manually, run 'source \$HOME/.bash_install'."
    unlock_install
    return 0
  fi

  case "$(get_os_type)" in
    Darwin)
      install_homebrew_builtins &&
      install_app_store_apps;
      install_shiftit_prefs;
      install_witch_prefs;
      install_fermata
          ;;
    *)
      >&2 echo "WARNING: Routines for non-Mac operating systems haven't been written yet."
      >&2 echo "WARNING: See '$HOME/.bash_install' for a list of applications to install."
      ;;
  esac
  get_ssh_and_aws_keys_from_onepassword
  get_secret_settings_from_onepassword
  get_firefox_multi_account_containers_from_onepassword
  unlock_install
fi

>&2 printf "${BGreen}INFO${NC}: Configuring system; please wait.\n"
enable_sudo_with_apple_watch_and_touch_id
install_reddit_cli
configure_todos
make_etc_hosts_adfree
modify_etc_hosts
update_obs_prefs
mark_first_time_setup_as_complete_if_needed
