# vim: set ft=bash:
export OP_CONFIG_DIR="$HOME/.config/op"
export OP_DISABLED="${OP_DISABLED:-false}"
export OP_CACHED_CREDENTIALS_FILE="$OP_CONFIG_DIR/credentials.yaml"

_op_sops() {
  if ! test -f "$OP_CACHED_CREDENTIALS_FILE"
  then
    log_error "1Password cached credentials file not found; run 'configure_1password_cli' to \
refresh"
    return 1
  fi

  if test -z "$OP_CREDENTIALS_SIGNING_KEY"
  then
    log_error "OP_CREDENTIALS_SIGNING_KEY is not set. Set it or import from .bash_secret_exports, \
then source .bash_onepassword_specific again."
    return 1
  fi
  sops --pgp "$OP_CREDENTIALS_SIGNING_KEY" "$@"
}

_create_op_config_dir() {
  test -d "$OP_CONFIG_DIR" && return 0
  mkdir -p "$OP_CONFIG_DIR"
  chmod -R 700 "$OP_CONFIG_DIR"
}

_create_op_credential_cache() {
  test -e "$OP_CACHED_CREDENTIALS_FILE" && return 0

  cat >"$OP_CACHED_CREDENTIALS_FILE" <<-YAML
---
credentials:
  1password_cli_token:
  1password_otp:
  1password_password:
  1password_sk:
  1password_device_key:
  1password_email:
  1password_default_vault:
YAML
  _op_sops -e -i "$OP_CACHED_CREDENTIALS_FILE"
}

_get_cached_op_credential() {
  key="$(printf '["credentials"]["%s"]' "$1")"
  val="$(_op_sops -d --extract "$key" "$OP_CACHED_CREDENTIALS_FILE")"
  test "$val" == 'null' && val=""
  echo "$val"
}

_clear_cached_op_credential() {
  key="$(printf '["credentials"]["%s"] ""' "$1")"
  _op_sops --set "$key" "$OP_CACHED_CREDENTIALS_FILE"
}

_set_cached_op_credential() {
  if test -z "$2"
  then
    log_error "value cannot be blank; please try again."
    return 1
  fi
  key="$(printf '["credentials"]["%s"] "%s"' "$1" "$2")"
  _op_sops --set "$key" "$OP_CACHED_CREDENTIALS_FILE"
}

_get_or_ask_for_cached_op_credential() {
  key="$1"
  key_type="$2"
  no_print="${3:-false}"
  existing_val="$(_get_cached_op_credential "$key")"
  if test -n "$existing_val"
  then
    echo "$existing_val"
    return 0
  fi
  prompt="Saving your 1Password $key_type locally to your Mac. Enter it here"
  val=""
  while true
  do
    if grep -Eiq '^true$' <<< "$no_print"
    then
      prompt="$prompt (You won't see any output)"
      >&2 printf "\n%s: " "$prompt"
      read -rs val
    else
      >&2 printf "%s: " "$prompt"
      read -r val
    fi
    test -n "$val" && break
    log_error "Value can't be empty."
    echo
  done
  _set_cached_op_credential "$1" "$val" &&
    _get_cached_op_credential "$1"
}

get_or_ask_for_cached_op_credential() {
  _get_or_ask_for_cached_op_credential "$1" "$2"
}

get_or_ask_for_sensitive_cached_op_credential() {
  _get_or_ask_for_cached_op_credential "$1" "$2" true
}

_get_1pass_token() {
  _get_cached_op_credential '1password_cli_token'
}

_op_cli_unauthenticated() {
  "$(brew --prefix)/bin/op" "$@"
}

_1pass_token_valid() {
  existing_token="$(_get_1pass_token)"
  test -z "$existing_token" && return 1
  _op_cli_unauthenticated vault list --session "$existing_token" &>/dev/null
}

_op_cli_authenticated() {
  _1pass_token_valid || return 1
  "$(brew --prefix)/bin/op" --account my --session "$(_get_1pass_token)" "$@"
}

_get_1pass_device_key() {
  _get_cached_op_credential '1password_device_key'
}

_get_1pass_otp() {
  _clear_cached_op_credential '1password_otp'
  get_or_ask_for_cached_op_credential "1password_otp" "OTP" || return 1
}

_get_1pass_password() {
  get_or_ask_for_sensitive_cached_op_credential "1password_password" "password"
}

_get_1pass_secret_key() {
  get_or_ask_for_sensitive_cached_op_credential "1password_sk" "secret key"
}

_get_1pass_email() {
  get_or_ask_for_cached_op_credential "1password_email" "email address"
}

_clear_1pass_email() {
  _clear_cached_op_credential '1password_email'
}

_clear_1pass_sk() {
  _clear_cached_op_credential '1password_sk'
}

_clear_1pass_pw() {
  _clear_cached_op_credential '1password_password'
}

_get_1pass_default_vault() {
  get_or_ask_for_cached_op_credential "1password_default_vault" "default vault"
}

_sign_into_1p_via_cli() {
  _op_account_exists() {
    _op_cli_unauthenticated account list | grep -q "$1"
  }

  _add_account_to_op() {
    email=$(_get_1pass_email) || return 1
    _op_account_exists && return 0

    secret_key=$(_get_1pass_secret_key) || return 1
    export OP_SECRET_KEY="$secret_key"
    password=$(_get_1pass_password) || return 1
    # This is a bug with the terminal package in Golang.
    # https://github.com/golang/go/issues/19909
    otp="$(_get_1pass_otp)" || return 1
    { sleep 2; \
      echo "$password"; \
      echo "$otp"; } | _op_cli_unauthenticated account add --address my --email "$email" && return 0
    rc="$?"
    _clear_1pass_email
    _clear_1pass_sk
    _clear_1pass_pw
    return "$rc"
  }

  _get_signin_token() {
    secret_key=$(_get_1pass_secret_key) || return 1
    export OP_SECRET_KEY="$secret_key"
    password=$(_get_1pass_password) || return 1
    # This is a bug with the terminal package in Golang.
    # https://github.com/golang/go/issues/19909
    token_data="$({ sleep 2; \
      echo "$password"; } | _op_cli_unauthenticated signin -f)" || return 1
    grep -E '^export' <<< "$token_data" | cut -f2 -d '=' | tr -d '"'
  }

  _1pass_token_valid && return 0

  _add_account_to_op || return 1

  token=$(_get_signin_token "$1") || return 1
  _set_cached_op_credential '1password_cli_token' "$token"
}

_1pass_app_integration_enabled() {
  settings_file="$HOME/Library/Group Containers/2BUA8C4S2C.com.1password/Library/Application Support/1Password/Data/settings/settings.json"
  test -e "$settings_file" &&
    test "$(jq -r '."developers.cliSharedLockState.enabled"' "$settings_file")" == 'true'
}

_ensure_onepassword_configured() {
  ensure_jq() {
    if ! &>/dev/null which jq
    then
      log_error "jq isn't installed. Run 'source ~/.bash_install' to \
fix this."
      return 1
    fi
  }

  ensure_not_disabled() {
    if grep -Eiq '^true$' <<< "$OP_DISABLED"
    then
      log_error "1Password helpers are disabled. Use 'op' directly."
      return 1
    fi
  }

  ensure_not_disabled && ensure_jq
}

_op_verify_that_we_are_on_a_mac() {
  if ! test "$(get_os_type)" == "Darwin"
  then
    log_warning "1Password CLI is not supported on $(get_os_type) yet."
    return 0
  fi
}

_generate_1pass_device_key() {
  existing_device_key="$(_get_cached_op_credential '1password_device_key')"
  test -n "$existing_device_key" && return 0
  _set_cached_op_credential '1password_device_key' \
    "$(head -c 16 /dev/urandom | base32 | tr -d = | tr '[:upper:]' '[:lower:]')"
}

list_password_titles() {
  vault="$1"
  list_titles() {
    vault="$1"
    if test -z "$vault"
    then
      _op_cli_authenticated item list --format=json | jq -r .[].title
    else
      _op_cli_authenticated item list --format=json --vault "$vault" | jq -r .[].title
    fi
  }

  _ensure_onepassword_configured && list_titles "$vault"
}

list_password_titles_matching_regex() {
  list_password_titles | grep -E "$1"
}

list_password_titles_in_vault() {
  list_password_titles "$1"
}

list_password_titles_in_vault_matching_regex() {
  list_password_titles "$1" | grep -E "$2"
}

list_vaults() {
  list() {
    _op_cli_authenticated vault list --format=json | jq -r .[].name
  }
  _ensure_onepassword_configured && list
}

get_password_field() {
  get() {
    title="$1"
    field="$2"
    vault="$3"
    if test -z "$vault"
    then
      _op_cli_authenticated item get "$title" --fields="$field"
    else
      _op_cli_authenticated item get --vault "$vault" "$title" --fields="$field"
    fi
  }

  _ensure_onepassword_configured || return 1
  result=$(get "$1" "$2" "$3")
  test -z "$result" && result="no password found"
  echo "$result"
}

get_password() {
  get_password_field "$1" 'password' "$2"
}

get_password_by_name_regexp() {
  pattern="$1"
  vault="$2"
  list_password_titles "$vault" |
    grep -E "$pattern" |
    while read -r password
    do get_password "$password" "$vault"
    done
}

get_password_by_name() {
  pattern="$1"
  vault="$2"
  list_password_titles "$vault" |
    grep "$pattern" |
    while read -r password
    do get_password <(cat /dev/stdin) "$vault"
    done
}

_get_1pass_functions() {
  grep -E '^[a-z].*() {' $HOME/src/setup/.bash_onepassword_specific |
    grep -Ev '^ensure' |
    grep -Ev '_get_1pass_functions' |
    sed 's/() {//'
}

# op_cli: Convenience function for other scripts wanting to interact with
# 1Password (since newer versions of op are more anal about session keys
# and stuff).
op_cli() {
  _op_cli_authenticated "$@"
}

configure_1password_cli() {
  _onepass_has_not_been_run_before() {
    ! test -d "$OP_CONFIG_DIR"
  }

  if _1pass_app_integration_enabled
  then
    log_info "INFO: 1Password CLI app integration is enabled; there's nothing to configure!"
    return 0
  fi

  _ensure_onepassword_configured || return 1
  _op_verify_that_we_are_on_a_mac
  if _onepass_has_not_been_run_before
  then
    _create_op_config_dir && _create_op_credential_cache && _generate_1pass_device_key
  fi
  _sign_into_1p_via_cli || return 1
}

alias get_1pass_functions=_get_1pass_functions
alias onepass_functions=_get_1pass_functions
if ! _1pass_app_integration_enabled
then
  log_info "Run 'configure_1password_cli' to start using 1Password in your terminal."
  log_info "If your account has two-factor authentication enabled, \
  provide ONEPASSWORD_OTP=[YOUR_OTP] before running 'configure_1password_cli'."
fi
