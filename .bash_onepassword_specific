# vim: set ft=bash:
get_default_vault() {
  2>/dev/null cat "$HOME/.config/op/default-vault" || echo 'not-set-run-first-time-setup'
}

export OP_DEFAULT_VAULT=$(get_default_vault)
export OP_DISABLED="${OP_DISABLED:-false}"

onepassword_app_integration_enabled() {
  settings_file="$HOME/Library/Group Containers/2BUA8C4S2C.com.1password/Library/Application Support/1Password/Data/settings/settings.json"
  test -e "$settings_file" &&
    test "$(jq -r '."developers.cliSharedLockState.enabled"' "$settings_file")" == 'true'
}

_security() {
  onepassword_app_integration_enabled && return 0

  if ! &>/dev/null security show-keychain-info
  then
    log_info "Going to interact with your Mac's keychain. Enter your system \
password when prompted."
    security unlock-keychain
  fi
  security "$@"
}

_relock_keychain() {
  onepassword_app_integration_enabled && return 0

  security lock-keychain
}

legacy_sign_into_onepassword() {
  account_email="$1"
  verify_that_we_are_on_a_mac() {
    if ! test "$(get_os_type)" == "Darwin"
    then
      log_warning "1Password CLI is not supported on $(get_os_type) yet."
      return 0
    fi
  }

  legacy_signin_via_email() {
    email="$1"
    secret_key=$(PRINT_PASSWORD_TO_SCREEN=true get_1pass_secret_key)
    password=$(PRINT_PASSWORD_TO_SCREEN=true get_1pass_password)      
    if ! test -z "$email"
    then
      # This is a bug with the terminal package in Golang.
      # https://github.com/golang/go/issues/19909
      if ! test -z "$ONEPASSWORD_OTP"
      then
        eval "$({ sleep 1; echo "$secret_key"; \
            sleep 2; \
            echo "$password"; \
            sleep 2; \
            echo "$ONEPASSWORD_OTP"; } | op signin --account my -f)"
      else
        eval "$({ sleep 1; echo "$secret_key"; \
            sleep 2; \
            echo "$password"; \
            sleep 2; } | op signin --account my -f)"
      fi
    else
      eval "$( { echo "$password"; sleep 1; printf "$ONEPASSWORD_OTP"; sleep 1; } |
        op signin --account my -f)"
    fi
  }

  save_op_token_to_keychain() {
    token=$(env | grep -E '^OP_SESSION_' | sed 's/.*=//')
    token_name=$(env | grep -E '^OP_SESSION_' | cut -f1 -d '=')
    if test -z "$token"
    then
      log_error "1Password token not found."
      return 1
    fi
    log_info "Saving 1Password token to your Keychain. Enter your system \
password if prompted."
    _security add-generic-password -a "$USER" \
      -s "1password_cli_token"  \
      -w "$token" \
      -U
    _security add-generic-password -a "$USER" \
      -s "1password_cli_token_name"  \
      -w "$token_name" \
      -U
  }

  verify_that_we_are_on_a_mac
  legacy_signin_via_email "$account_email" && save_op_token_to_keychain
}

ensure_onepassword_configured() {
  ensure_jq() {
    if ! &>/dev/null which jq
    then
      log_error "jq isn't installed. Run 'source ~/.bash_install' to \
fix this."
      return 1
    fi
  }

  ensure_not_disabled() {
    if grep -Eiq '^true$' <<< "$OP_DISABLED"
    then
      log_error "1Password helpers are disabled. Use 'op' directly."
      return 1
    fi
  }

  ensure_not_disabled && ensure_jq
}

list_password_titles() {
  vault="$1"
  list_titles() {
    vault="$1"
    if test -z "$vault"
    then
      op item list --format=json | jq -r .[].title
    else
      op item list --format=json --vault "$vault" | jq -r .[].title
    fi
  }

  ensure_onepassword_configured && list_titles "$vault"
}

list_password_titles_in_vault() {
  list_password_titles "$1"
}

list_vaults() {
  list() {
    op vault list --format=json | jq -r .[].name
  }
  ensure_onepassword_configured && list
}

get_password_field() {
  get() {
    title="$1"
    field="$2"
    vault="$3"
    if test -z "$vault"
    then
      op item get "$title" --fields="$field"
    else
      op item get --vault "$vault" "$title" --fields="$field"
    fi
  }

  ensure_onepassword_configured || return 1
  result=$(get "$1" "$2" "$3")
  test -z "$result" && result="no password found"
  echo "$result"
}

get_password() {
  get_password_field "$1" 'password' "$2"
}

get_password_by_name_regexp() {
  pattern="$1"
  vault="$2"
  list_password_titles "$vault" |
    grep -E "$pattern" |
    while read -r password
    do get_password "$password" "$vault"
    done
}

get_password_by_name() {
  pattern="$1"
  vault="$2"
  list_password_titles "$vault" |
    grep "$pattern" |
    while read -r password
    do get_password <(cat /dev/stdin) "$vault"
    done
}

get_onepass_functions() {
  grep -E '^[a-z].*() {' $HOME/src/setup/.bash_onepassword_specific |
    grep -Ev '^ensure' |
    grep -Ev 'get_onepass_functions' |
    sed 's/() {//'
}

set_default_vault() {
  printf "$1" >> "$HOME/.config/op/default-vault"
}

configure_1password_cli() {
  if onepassword_app_integration_enabled
  then
    log_info "INFO: 1Password CLI app integration is enabled; there's nothing to configure!"
    return 0
  fi
  verify_that_we_are_on_a_mac() {
    if ! test "$(get_os_type)" == "Darwin"
    then
      log_warning "1Password CLI is not supported on $(get_os_type) yet."
      return 0
    fi
  }

  onepass_has_not_been_run_before() {
    ! test -d "$HOME/.config/op" || test -z "$(find "$HOME/.config/op" ! -path "$HOME/.config/op")"
  }

  run_first_time_setup() {
    log_info "If first time set-up fails, you might have two-factor authentication \
enabled on your account. If so, run this command again, but pre-pend \
ONEPASSWORD_OTP=[YOUR_OTP] to it."
    read -p "INFO: It looks like the 1Password CLI hasn't been set up on this \
system before. Enter your 1Password email address to configure it now: " onepass_email
    sign_into_onepassword "$onepass_email"
    read -p "INFO: Now, please provide the default 1Password vault to use for \
fetching passwords and documents with the functions in this script: " default_vault
    set_default_vault "$default_vault"
    export OP_DEFAULT_VAULT=$(get_default_vault)
  }

  is_onepass_token_valid() {
    token="$1"
    op list vaults --session "$token" &>/dev/null
  }

  get_onepass_token() {
    _security find-generic-password -a "$USER" -s "1password_cli_token" -w
  }

  get_onepass_token_name() {
    _security find-generic-password -a "$USER" -s "1password_cli_token_name" -w
  }

  trap 'rc=$?; _relock_keychain; exit $rc' INT HUP EXIT
  trap '_relock_keychain' RETURN
  ensure_onepassword_configured || return 1
  verify_that_we_are_on_a_mac
  if onepass_has_not_been_run_before
  then
    run_first_time_setup
  else
    token=$(get_onepass_token)
    if ! is_onepass_token_valid "$token"
    then legacy_sign_into_onepassword
    else
      eval "export ${token_name}=${token}"
    fi
  fi

  export OP_DEVICE=$(PRINT_PASSWORD_TO_SCREEN=true NO_PROMPT=true get_1pass_device_key)
  trap - SIGINT SIGHUP EXIT RETURN
}

_get_onepassword_account_info_from_keychain() {
  key_name="${1:-1password_password}"
  key_type="${2:-password}"
  print_to_screen="${3:-false}"
  no_prompt="${4:-false}"
  if test "$CHANGE_1PASS_PASSWORD" != "true"
  then
    password="$(_security find-generic-password -a "$USER" -s "$key_name" -w 2>/dev/null)"
    if ! test -z "$password"
    then
      printf "$password" | pbcopy
      if test "$no_prompt" != "true"
      then
        log_info "Your 1Password $key_type has been copied into your keyboard."
      fi
      if test "$print_to_screen" == "true"
      then
        printf "$password"
      fi
      return 0
    fi
  fi
  if test "$key_name" == "1password_device_key"
  then
    password=$(head -c 16 /dev/urandom | base32 | tr -d = | tr '[:upper:]' '[:lower:]')
  else
    read -s -p "Saving your 1Password $key_type locally to your Mac. Enter it here: " password
  fi
  _security add-generic-password -a "$USER" \
    -s "$key_name" \
    -w "$password" \
    -U
  CHANGE_1PASS_PASSWORD=false _get_onepassword_account_info_from_keychain "$1" "$2" "$3" "$4"
}

get_1pass_otp() {
  _get_onepassword_account_info_from_keychain "1password_otp" "OTP" "$PRINT_PASSWORD_TO_SCREEN" "$NO_PROMPT"
}

get_1pass_password() {
  _get_onepassword_account_info_from_keychain "1password_password" "password" "$PRINT_PASSWORD_TO_SCREEN" "$NO_PROMPT"
}

get_1pass_secret_key() {
  _get_onepassword_account_info_from_keychain "1password_sk" "secret key" "$PRINT_PASSWORD_TO_SCREEN" "$NO_PROMPT"
}

get_1pass_device_key() {
  _get_onepassword_account_info_from_keychain "1password_device_key" "device key" "$PRINT_PASSWORD_TO_SCREEN" "$NO_PROMPT"
}

alias get_1pass_functions=get_onepass_functions
alias onepass_functions=get_onepass_functions
if ! onepassword_app_integration_enabled
then
  log_info "Run 'configure_1password_cli' to start using 1Password in your terminal."
  log_info "If your account has two-factor authentication enabled, \
  provide ONEPASSWORD_OTP=[YOUR_OTP] before running 'configure_1password_cli'."
fi
