# vim: set ft=sh:
_security() {
  if ! sudo -n true 2>/dev/null
  then
    >&2 echo "INFO: Going to interact with your Mac's keychain. Enter your system \
password when prompted."
  fi
  sudo security "$@"
}

generate_and_save_onepass_token() {
  account_email="$1"
  verify_that_we_are_on_a_mac() {
    if ! test "$(get_os_type)" == "Darwin"
    then
      >&2 echo "WARNING: 1Password CLI is not supported on $(get_os_type) yet."
      return 0
    fi
  }

  sign_in() {
    email="$1"
    secret_key=$(PRINT_PASSWORD_TO_SCREEN=true get_1pass_secret_key)
    password=$(PRINT_PASSWORD_TO_SCREEN=true get_1pass_password)      
    if ! test -z "$email"
    then
      # This is a bug with the terminal package in Golang.
      # https://github.com/golang/go/issues/19909
      if ! test -z "$ONEPASSWORD_OTP"
      then
        export OP_SESSION_my=$({ sleep 1; echo "$secret_key"; \
            sleep 2; \
            echo "$password"; \
            sleep 2; \
            echo "$ONEPASSWORD_OTP"; } | op signin my -r $email)
      else
        export OP_SESSION_my=$({ sleep 1; echo "$secret_key"; \
            sleep 2; \
            echo "$password"; \
            sleep 2; } | op signin my -r $email)
      fi
    else
      export OP_SESSION_my=$({ echo "$password"; sleep 1; printf "$ONEPASSWORD_OTP"; sleep 1; } | op signin my -r)
    fi
  }

  save_op_token_to_keychain() {
    >&2 echo "INFO: Saving 1Password token to your Keychain. Enter your system \
password if prompted."
    _security add-generic-password -a "$USER" \
      -s "1password_cli_token"  \
      -w "$OP_SESSION_my" \
      -U
  }

  verify_that_we_are_on_a_mac
  sign_in "$account_email" && save_op_token_to_keychain
}

ensure_onepassword_configured() {
  ensure_onepass() {
    if test -z "$OP_SESSION_my"
    then
      >&2 echo "ERROR: 1Password hasn't been configured yet. \
  Run 'configure_1password_cli' to fix this."
      return 1
    fi
  }

  ensure_jq() {
    if ! &>/dev/null which jq
    then
      >&2 echo "ERROR: jq isn't installed. Run 'source ~/.bash_install' to \
fix this."
      return 1
    fi
  }

  ensure_jq && ensure_onepass
}

list_password_titles() {
  vault="$1"
  list_titles() {
    vault="$1"
    if test -z "$vault"
    then
      op list items | jq -r .[].overview.title
    else
      op list items --vault "$vault" | jq -r .[].overview.title
    fi
  }

  ensure_onepassword_configured && list_titles "$vault"
}

list_password_titles_in_vault() {
  list_password_titles "$1"
}

list_vaults() {
  list() {
    op list vaults | jq -r .[].name
  }
  ensure_onepassword_configured && list
}

get_password_field() {
  get() {
    title="$1"
    op list items | \
      jq --arg TITLE "$title" '.[] | select(.overview.title == $TITLE)' | \
      op get item --fields "$2" - | \
      tr -d "\n"
  }

  ensure_onepassword_configured && get "$1" "$2"
}

get_password() {
  get_password_field "$1" 'password'
}

get_onepass_functions() {
  grep -E '^[a-z].*() {' $HOME/src/setup/.bash_onepassword_specific |
    grep -Ev '^ensure' |
    grep -Ev 'get_onepass_functions' |
    sed 's/() {//'
}

configure_1password_cli() {
  verify_that_we_are_on_a_mac() {
    if ! test "$(get_os_type)" == "Darwin"
    then
      >&2 echo "WARNING: 1Password CLI is not supported on $(get_os_type) yet."
      return 0
    fi
  }

  onepass_has_not_been_run_before() {
    ! test -d "$HOME/.config/op" || test -z "$(find "$HOME/.config/op" ! -path "$HOME/.config/op")"
  }

  run_first_time_setup() {
    read -p "INFO: It looks like the 1Password CLI hasn't been set up on this \
system before. Enter your 1Password email address to configure it now: " onepass_email
    generate_and_save_onepass_token "$onepass_email"
  }

  is_onepass_token_valid() {
    token="$1"
    op list vaults --session "$token" &>/dev/null
  }

  get_onepass_token() {
    _security find-generic-password -a "$USER" -s "1password_cli_token" -w
  }

  verify_that_we_are_on_a_mac
  if onepass_has_not_been_run_before
  then
    run_first_time_setup
  else
    token=$(get_onepass_token)
    if ! is_onepass_token_valid "$token"
    then
      generate_and_save_onepass_token
    else
      export OP_SESSION_my=$token
    fi
  fi
  export OP_DEVICE=$(PRINT_PASSWORD_TO_SCREEN=true NO_PROMPT=true get_1pass_device_key)
}

_get_1pass_password() {
  key_name="${1:-1password_password}"
  key_type="${2:-password}"
  print_to_screen="${3:-false}"
  no_prompt="${4:-false}"
  if test "$CHANGE_1PASS_PASSWORD" != "true"
  then
    password="$(_security find-generic-password -a "$USER" -s "$key_name" -w 2>/dev/null)"
    if ! test -z "$password"
    then
      printf "$password" | pbcopy
      if test "$no_prompt" != "true"
      then
        >&2 echo "INFO: Your 1Password $key_type has been copied into your keyboard."
      fi
      if test "$print_to_screen" == "true"
      then
        printf "$password"
      fi
      return 0
    fi
  fi
  if test "$key_name" == "1password_device_key"
  then
    password=$(head -c 16 /dev/urandom | base32 | tr -d = | tr '[:upper:]' '[:lower:]')
  else
    read -s -p "Saving your 1Password $key_type locally to your Mac. Enter it here: " password
  fi
  _security add-generic-password -a "$USER" \
    -s "$key_name" \
    -w "$password" \
    -U
  CHANGE_1PASS_PASSWORD=false _get_1pass_password "$1" "$2" "$3" "$4"
}

get_1pass_password() {
  _get_1pass_password "1password_password" "password" "$PRINT_PASSWORD_TO_SCREEN" "$NO_PROMPT"
}

get_1pass_secret_key() {
  _get_1pass_password "1password_sk" "secret key" "$PRINT_PASSWORD_TO_SCREEN" "$NO_PROMPT"
}

get_1pass_device_key() {
  _get_1pass_password "1password_device_key" "device key" "$PRINT_PASSWORD_TO_SCREEN" "$NO_PROMPT"
}

alias get_1pass_functions=get_onepass_functions
alias onepass_functions=get_onepass_functions
>&2 printf "${BGreen}INFO${NC}: Run 'configure_1password_cli' to start using 1Password in your terminal.\n"
