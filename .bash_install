#!/usr/bin/env bash
export FROM_BASH_INSTALL=true
source "$HOME/.bash_onepassword_specific"
trap "rm -f $INSTALL_LOCK_FILE" INT

ETC_HOSTS_PREPPED_SENTINEL_FILE="$HOME/.config/setup/etc_hosts_prepped"
ONEPASSWORD_VAULT="${ONEPASSWORD_VAULT:-"Carlos's Personal Vault"}"
INSTALL_LOCK_FILE="$HOME/.bash_install_lock"
COMPLETE_ALIAS_URL=https://raw.githubusercontent.com/cykerway/complete-alias/master/complete_alias
# Update our OBS settings.
OBS_PREFS_OP_KEY="OBS Settings"
OBS_PREFS_SENTINEL_FILE="$HOME/.config/setup/obs_has_been_setup"
DISABLE_OBS_PREFS_CHECK="${DISABLE_OBS_PREFS_CHECK:-false}" # Should we disable updating /etc/hosts?
FORCE_OBS_PREFS_UPDATE="${FORCE_OBS_PREFS_UPDATE:-false}" # Should we update our /etc/hosts anyway?
OBS_PREFS_TIMESTAMP_FILE="$HOME/.config/obs-prefs-updater/timestamp"
MAX_OBS_PREFS_STALENESS_DAYS=5 # How current should /etc/hosts be?
# Update our local /etc/hosts file to disable tracking, telemetry, and ads.
# Sourced from firebog.net
DISABLE_ADFREE_CHECK="${DISABLE_ADFREE_CHECK:-false}" # Should we disable updating /etc/hosts?
FORCE_ADFREE_UPDATE="${FORCE_ADFREE_UPDATE:-false}" # Should we update our /etc/hosts anyway?
ADFREE_TIMESTAMP_FILE="$HOME/.config/adfree-etchosts/timestamp"
MAX_AD_FREE_STALENESS_DAYS=5 # How current should /etc/hosts be?
HOMEBREW_APPS_EXCLUSION_FILE="$HOME/.skip_these_apps"
HOMEBREW_BUILTINS_X86=$(cat <<-APPS
vagrant
virtualbox
APPS
)
HOMEBREW_TAPS=$(cat <<-TAPS
homebrew/cask-fonts
homebrew/cask-versions
TAPS
)
HOMEBREW_BUILTINS=$(cat <<-APPS
1password
1password-cli
alfred
android-platform-tools
authy
awscli
azure-cli
bartender
bash
bash-completion@2
cscope
ctags
contexts
colordiff
coreutils
curl
direnv
feh
findutils
font-dejavu-sans-mono-nerd-font
fzf
gawk
gh
git
gnu-getopt
gnu-indent
gnu-sed
gnu-tar
gnutls
grep
gnupg
brightness
htop
imagemagick
iterm2
keyboardcleantool
make
mas
obs
reattach-to-user-namespace
rectangle-pro
scrcpy
shellcheck
sonos
tailscale
the_silver_searcher
tmux
todo-txt
tree
vb-cable
vim
vlc
w3m
xquartz
zoom
APPS
)
APPLE_APP_STORE_APPS=$(cat <<-APPS
APPS
)
ETC_HOSTS_EXCLUSIONS=$(cat <<-EXCLUSIONS
amp-reddit-com\.cdn\.ampproject\.org
analytics\.google\.com
api\.twitter\.com
dynatrace\.com
engineering\.linkedin\.com
i\.redd\.it
i\.reddit\.com
www\.reddit\.com
linkedin\.com
media\.licdn\.com
mmg-fna\.whatsapp\.net
mmg\.whatsapp\.net
preview\.redd\.it
preview\.redd\.it
oauth\.reddit\.com
reddit\.com
old\.reddit\.com
reddit\.map\.fastly\.net
static\.licdn\.com
t\.co
twimg\.com
twitter\.com
v\.redd\.it
whatsapp\.com
whatsapp\.net
www\.licdn\.com
www\.linkedin\.com
www\.redditstatic\.com
www\.t\.co
web\.whatsapp\.com
incoming\.telemetry\.mozilla\.org
whatsapp-.*fbcdn\.net
media-.*whatsapp\.net
mmx-ds\.cdn\.whatsapp\.net
www\.facebook\.com$
fonts\.gstatic\.com$
EXCLUSIONS
)
ETC_HOSTS_INCLUSIONS=$(cat <<-INCLUSIONS
fonts.gstatic.com:142.250.114.94
INCLUSIONS
)
FERMATA_URL="https://github.com/iccir/Fermata/releases/download/Fermata-136/Fermata-136.zip"

_wait_for_file_to_be_manually_downloaded_from_op() {
  local key="$1"
  local file="$2"
  test -f "$file" && return 0

  while ! test -f "$file"
  do
    echo "INFO: Please open 1Password and download '$key' into '$file'. Press ENTER to continue."
    read
  done
}

check_for_internet_access() {
  test "$(curl -s --connect-timeout 3 http://nil.carlosnunez.me)" == "i love socks."
}

get_homebrew_builtins() { brew list --formula | tr '\t' '\n'; }
get_app_store_apps() { mas list | sed -E 's/^[0-9]+ (.*) \(.*$/\1/'; }

install_if_missing() {
  installed_apps="$1"
  install_command="$2"
  apps="${@:3}"
  for app in $apps
  do
    if ! $(echo "$installed_apps" | grep -q "$app")
    then
      log_info "Installing app: ${BGreen}$app${NC}\n"
      eval "$install_command $app"
    fi
  done
}

is_apple_m1_cpu() {
  grep -iq 'arm' <<< "$(uname -p)"
}

install_homebrew_builtins() {
  # TECH NOTE: There isn't an option to hide warnings because the Homebrew
  # developers don't think that it's necessary, which is sad.
  # https://github.com/Homebrew/brew/issues/2351
  apps="$(echo "$HOMEBREW_BUILTINS" | tr '\n' ' ')"
  if is_apple_m1_cpu
  then
    log_warning "You appear to be using a MacBook with an \
Apple M1 CPU. Install Rosetta first in order to install these apps: \
$(echo "${HOMEBREW_BUILTINS_X86}" | tr '\n' ' ')\n"
  else
    apps="${apps} $(echo "$HOMEBREW_BUILTINS_X86" | tr '\n' ' ')"
  fi

  apps_missing=$(comm -2 <(tr ' ' '\n' <<< "$apps" | sort) <(brew list -1 | sort) | grep -Ev '^\t')
  if test -n "$apps_missing"
  then
    if test -f "$HOMEBREW_APPS_EXCLUSION_FILE"
    then
      apps_to_exclude=$(cat "$HOMEBREW_APPS_EXCLUSION_FILE")
      log_warn "Homebrew exclusion file detected; skipping these apps: $(tr '\n' ' ' <<< $apps_to_exclude)"
      apps_missing=$(comm -2 \
        <(tr ' ' '\n' <<< "$apps_missing" | sort) \
        <(sort <<< "$apps_to_exclude") | grep -Ev '^\t')
    fi
    if test -n "$apps_missing"
    then
      log_info "Installing: $(tr '\n' ' ' <<< "$apps_missing")"
      brew install $apps_missing
    fi
  fi
}

install_app_store_apps() {
  if &>/dev/null mas account
  then
    install_if_missing "$(get_app_store_apps)" "mas lucky" $APPLE_APP_STORE_APPS
  else
    formatted_apps=$(echo "$APPLE_APP_STORE_APPS" | tr '\n' ' ')
    log_warning "You are not signed in to the App Store. Sign in to install \
these apps: $formatted_apps\n"
  fi
}

configure_todos() {
  if ! test -d "$HOME/src/todos"
  then
    log_info "Installing shell todos"
    if ! test -f "$HOME/.ssh/config" || ! grep 'Host github.carlosnunez.me' "$HOME/.ssh/config"
    then
      log_error "Can't configure todos yet; set up SSH config first."
      return 0
    fi
    git clone git@github.carlosnunez.me:carlosonunez/todos.git "$HOME/src/todos"
  fi
}

update_obs_prefs() {
  OBS_PREFS_TMP_FILE="/tmp/obs-studio-prefs.zip"

  _write_refresh_date_timestamp() {
    test -d "$(dirname "$OBS_PREFS_TIMESTAMP_FILE")" || mkdir "$(dirname "$OBS_PREFS_TIMESTAMP_FILE")"
    date +%s > "$OBS_PREFS_TIMESTAMP_FILE"
  }

  _get_refresh_date_timestamp() {
    test -f "$OBS_PREFS_TIMESTAMP_FILE" &&
      cat "$OBS_PREFS_TIMESTAMP_FILE" ||
      printf '0'
  }

  _obs_prefs_updated_recently() {
    test "$(_get_refresh_date_timestamp)" != "0" && \
      test "$(_get_refresh_date_timestamp)" -lt "$(date +%s -d "+$MAX_AD_FREE_STALENESS_DAYS days")"
  }

  _obs_prefs_updating_disabled() {
    grep -Eiq "^true$" <<< "$DISABLE_OBS_PREFS_CHECK"
  }

  _force() {
    grep -Eiq "^true$" <<< "$FORCE_OBS_PREFS_UPDATE"
  }

  _download_and_unzip_obs_prefs() {
    op-cli document get --vault "$OP_DEFAULT_VAULT" "$OBS_PREFS_OP_KEY" >  "$OBS_PREFS_TMP_FILE" &&
      unzip -d "${HOME}/Library/Application Support" "$OBS_PREFS_TMP_FILE" &&
      rm "$OBS_PREFS_TMP_FILE"
  }

  _zip_and_upload_obs_prefs() {
    pushd "${HOME}/Library/Application Support" &&
      zip -q -r "$OBS_PREFS_TMP_FILE" obs-studio &&
      popd
    existing=$(op-cli document list --format=json --vault "$OP_DEFAULT_VAULT" | \
      jq -r '.[].overview.title' | \
      grep "$OBS_PREFS_OP_KEY")
    if test -z "$existing"
    then
      log_info "OBS settings not found in 1Password. Creating it now."
      op-cli document create --vault "$OP_DEFAULT_VAULT" \
        --title "$OBS_PREFS_OP_KEY" \
        "$OBS_PREFS_TMP_FILE"
    else
      op-cli document edit --vault "$OP_DEFAULT_VAULT" \
        "$OBS_PREFS_OP_KEY" \
        "$OBS_PREFS_TMP_FILE"
    fi
    rm "$OBS_PREFS_TMP_FILE"
  }

  if _force || ( ! _obs_prefs_updating_disabled && ! _obs_prefs_updated_recently )
  then
    log_info "It's been over $MAX_OBS_PREFS_STALENESS_DAYS days since OBS prefs have \
been updated. Doing that now."
    log_info "Set DISABLE_OBS_PREFS_CHECK to 'true' to disable this behavior."
    if ! check_for_internet_access
    then
      log_error "Internet seems to be down. Do this manually by running '${FUNCNAME[0]}'"
      return 1
    fi
    if ! test -f "$OBS_PREFS_SENTINEL_FILE"
    then
      log_info "It looks like OBS hasn't been set up yet. Fetching prefs now."
      _download_and_unzip_obs_prefs
      touch "$OBS_PREFS_SENTINEL_FILE"
    else
      _zip_and_upload_obs_prefs
    fi
    _write_refresh_date_timestamp
  fi
}


get_ssh_and_aws_keys_from_onepassword() {
  SSH_SENTINEL_FILE="$HOME/.config/setup/ssh_keys_downloaded"
  SSH_SENTINEL_DIR=$(dirname "$SSH_SENTINEL_FILE")

  ssh_and_aws_keys_retrieved() {
    test -f "$SSH_SENTINEL_FILE"
  }

  mark_ssh_and_aws_keys_retrieved() {
    test -d "$SSH_SENTINEL_DIR" || mkdir -p "$SSH_SENTINEL_DIR"
    touch "$SSH_SENTINEL_FILE"
  }

  ssh_folder_not_present_or_empty() {
    # TECH NOTE: executing `find` against an empty directory will only
    # yield the directory itself.
    ! test -d "$HOME/.ssh" || test "$(find $HOME/.ssh)" == "$HOME/.ssh"
  }

  download_keys() {
    _wait_for_file_to_be_manually_downloaded_from_op "SSH and AWS Keys" "$HOME/Downloads/keys.zip"
  }

  unzip_keys() {
    unzip -d $HOME/.ssh "$HOME/Downloads/keys.zip"
  }

  permission_keys() {
    grep -Elr "BEGIN (OPENSSH|RSA)" $HOME/.ssh | xargs chmod 600
  }

  import_gpg_keys() {
    gpg --import-ownertrust ~/.ssh/ownertrust &&
    gpg --import ~/.ssh/public_keys &&
    gpg --import ~/.ssh/private_keys
  }

  remove_downloaded_keys() {
    rm "$HOME/Downloads/keys.zip"
  }

  symlink_git_config() {
    ln -s "$HOME/.ssh/gitconfig" "$HOME/.gitconfig"
  }

  ssh_and_aws_keys_retrieved && return 0

  log_info "Downloading and configuring SSH and cloud keys. (You'll be \
asked to provide a passphrase for your GPG keys.)"
  download_keys &&
    unzip_keys &&
    permission_keys &&
    import_gpg_keys &&
    remove_downloaded_keys &&
    symlink_git_config &&
    mark_ssh_and_aws_keys_retrieved
}

get_secret_settings_from_onepassword() {
  SECRET_SETTINGS_SENTINEL_FILE="$HOME/.config/setup/secret_settings_downloaded"
  SECRET_SETTINGS_SENTINEL_DIR=$(dirname "$SECRET_SETTINGS_SENTINEL_FILE")

  secret_settings_installed() {
    test -f "$SECRET_SETTINGS_SENTINEL_FILE"
  }

  mark_secret_settings_as_installed() {
    test -d "$SECRET_SETTINGS_SENTINEL_DIR" || mkdir -p "$SECRET_SETTINGS_SENTINEL_DIR"
    touch "$SECRET_SETTINGS_SENTINEL_FILE"
  }

  download_env_settings() {
    _wait_for_file_to_be_manually_downloaded_from_op "Secret Environment Settings" \
      "$HOME/Downloads/environment.zip"
  }

  unzip_env_settings() {
    unzip -d $HOME "$HOME/Downloads/environment.zip"
  }

  remove_downloaded_env_settings() {
    rm "$HOME/Downloads/environment.zip"
  }

  if ! secret_settings_installed
  then
    log_info "Downloading secret environment settings."
    download_env_settings &&
      unzip_env_settings &&
      remove_downloaded_env_settings &&
      mark_secret_settings_as_installed
  fi
}
get_local_firefox_multi_account_containers() {
  cat "$HOME/.ssh/firefox_mac_regexes" | pbcopy
}

get_firefox_multi_account_containers_from_onepassword() {
  ensure_regexes_not_present() {
    ! test -f "$HOME/.ssh/firefox_mac_regexes"
  }

  download_regexes() {
    op-cli item get "Firefox Multi-Account Container Configuration" \
      --vault "$OP_DEFAULT_VAULT" \
      --fields notesPlain >> $HOME/.ssh/firefox_mac_regexes
  }

  install_regexes() {
    log_info "Run this command to copy your Firefox Multi-Account Containers settings. \
Click on 'Containerise' then click the pencil and paste: \
'get_local_firefox_multi_account_containers'"
  }

  if ensure_regexes_not_present
  then
    log_info "Downloading and configuring Firefox Multi-Account Containers."
    download_regexes && install_regexes
  fi
}

update_firefox_multi_account_containers_into_onepassword() {
  prompt_for_containers() {
    log_info "Add your containers below; press CTRL-d when finished."
    cat
  }
  configure_1password_cli
  containers_string=$(prompt_for_containers)
  if ! test -z "$containers_string"
  then
    log_info "Updating 1Password."
    op-cli item edit 'Firefox Multi-Account Container Configuration' notesPlain="$containers_string" \
      --vault "$OP_DEFAULT_VAULT"
  fi
}

installation_is_locked() {
  random_wait_time=$(bc -l <<< "scale=4 ; ${RANDOM}/32767")
  sleep $random_wait_time && test -e "$INSTALL_LOCK_FILE"
}

remove_dead_install_locks() {
  bash_processes_holding_lock() {
    ps -ef | grep bash | grep -q "$(get_bash_process_holding_lock)"
  }
  if installation_is_locked
  then
    if ! bash_processes_holding_lock
    then
      unlock_install
    fi
  fi
}

get_bash_process_holding_lock() {
  cat "$INSTALL_LOCK_FILE"
}

get_tmux_windowpane_holding_lock() {
  tmux list-panes -a -F "#{pane_pid} #{window_name}:#{window_id}-#{pane_id}" | \
    grep "$(get_bash_process_holding_lock)" | \
    cut -f2 -d ' '
}

lock_install() {
  printf $$ > "$INSTALL_LOCK_FILE"
}

unlock_install() {
  rm -f "$INSTALL_LOCK_FILE"
}

tap_casks() {
  comm -2 <(sort <<< "$HOMEBREW_TAPS") <(brew tap | sort) |
  grep -Ev '^\t' |
  xargs -I {} brew tap {}
}

install_fermata(){ 
  if test "$(get_os_type)" == "Darwin" && ! is_apple_m1_cpu && ! test -d "/Applications/Fermata.app"
  then
    log_info_sudo "Installing Fermata"
    curl -Lso /tmp/fermata.zip "$FERMATA_URL" &&
      unzip -q /tmp/fermata.zip -d /tmp &&
      sudo mv /tmp/Fermata.app /Applications &&
      defaults import "$HOME/src/setup/fermata.plist" ~/Library/Preferences/com.iccir.Fermata.plist
  fi
}

mark_first_time_setup_as_complete_if_needed() {
  file="$HOME/.config/setup/first_time_setup_complete"
  if ! test -f "$file"
  then
    test -d "$(dirname "$file")" || mkdir -p "$(dirname "$file")"
    touch "$file"
    log_info "First time setup complete. Enjoy your machine!"
  fi
}

install_complete_alias() {
  if ! test -f "$HOME/.bash_completion.d/complete_alias"
  then
    log_info "Installing complete_alias"
    mkdir -p "$HOME/.bash_completion.d" &&
      curl "$COMPLETE_ALIAS_URL" > ~/.bash_completion.d/complete_alias
  fi
}

update_bash() {
  if grep -iq "^3" <<< "$BASH_VERSION"
  then
    current_shell="$(dscl . -read /Users/cn shell | awk '{print $NF}')"
    want_shell="$(brew --prefix)/bin/bash"
    test "${current_shell}" == "${want_shell}" && return 0

    log_info_sudo "Updating Bash (tmux reload required once finished)"
    sudo sh -c "echo $want_shell >> /etc/shells" && \
    chsh -s "$want_shell"
  fi
}

first_time_setup_done() {
  file="$HOME/.config/setup/first_time_setup_complete"
  test -f "$file"
}

bash_completion_location() {
  locations=(
    /opt/homebrew/etc/profile.d/bash_completion.sh
    /opt/homebrew/etc/bash_completion
    /etc/bash_completion
  )
  for location in "${locations[@]}"
  do
    if test -f "$location"
    then
      echo "$location"
      return 0
    fi
  done
  log_warning "bash_completion script not found at any of these locations: ${locations[*]}"
}

stop_stealing_focus() {
  test "$(defaults read com.apple.dock workspaces-auto-swoosh)" == 0 && return 0

  defaults write com.apple.dock workspaces-auto-swoosh -bool false
  osascript -e 'tell application "Dock" to quit'
}

disable_the_dock_entirely() {
  test -f "$HOME/.config/setup/dock-hidden" && return 0

  defaults write com.apple.dock persistent-apps -array &&
    defaults write com.apple.Dock autohide -bool TRUE &&
    defaults write com.apple.dock autohide-delay -float 1000 &&
    killall Dock
}

setup_onepassword() {
  if ! first_time_setup_done
  then
    log_info_sudo "Welcome to the installer! We'll need to configure 1Password \
  first so that we can fetch your secret preferences."
    if ! configure_1password_cli
    then
      log_error "Failed to configure 1Password. This might be because your \
  account has two-factor authentication enabled. Run 'source ~/.bash_profile' again, but \
  pre-pend this to it: 'ONEPASSWORD_OTP=[YOUR_OTP]'."
      return 1 2>/dev/null
    fi
  fi
}

remove_dead_install_locks
if installation_is_locked
then
  log_warning ".bash_install is installing apps in tmux window-pane \
$(get_tmux_windowpane_holding_lock). Skipping to post-install."
else
  if ! check_for_internet_access
  then
    log_warning "Internet access is not available. We will not attempt to install \
or update apps. To re-attempt manually, run 'source \$HOME/.bash_install'."
    unlock_install
    return 0
  fi

  log_info "Checking and/or updating software. This might take a few minutes."

  lock_install
  tap_casks

  # Install a few necessary brew formulae
  # ======================================
  case "$(get_os_type)" in
    Darwin)
      install_homebrew_builtins &&
      install_app_store_apps;
      install_fermata
          ;;
    *)
      log_warning "Routines for non-Mac operating systems haven't been written yet."
      log_warning "See '$HOME/.bash_install' for a list of applications to install."
      ;;
  esac
  get_ssh_and_aws_keys_from_onepassword
  get_secret_settings_from_onepassword
  get_firefox_multi_account_containers_from_onepassword
  unlock_install
fi
stop_stealing_focus
disable_the_dock_entirely
install_reddit_cli
configure_todos
update_obs_prefs
install_complete_alias
update_bash
mark_first_time_setup_as_complete_if_needed

test -f "$(bash_completion_location)" && source "$(bash_completion_location)"

trap - INT
