#!/usr/bin/env bash
trap "rm -f $INSTALL_LOCK_FILE" INT

SHIFTIT_PREFS_UPDATED_SENTINEL_FILE="$HOME/.config/setup/shiftit_updated"
WITCH_PREFS_UPDATED_SENTINEL_FILE="$HOME/.config/setup/witch_updated"
AMETHYST_PREFS_UPDATED_SENTINEL_FILE="$HOME/.config/setup/amethyst_updated"
ETC_HOSTS_PREPPED_SENTINEL_FILE="$HOME/.config/setup/etc_hosts_prepped"
APPLE_WATCH_PAMID_LIBPATH=/usr/local/lib/pam/pam_watchid.so.2
APPLE_WATCH_PAMID_URL=https://github.com/biscuitehh/pam-watchid
APPLE_WATCH_PAMID_PATH=$HOME/.config/security/pamid-applewatch
ONEPASSWORD_VAULT="${ONEPASSWORD_VAULT:-"Carlos's Personal Vault"}"
INSTALL_LOCK_FILE="$HOME/.bash_install_lock"
COMPLETE_ALIAS_URL=https://raw.githubusercontent.com/cykerway/complete-alias/master/complete_alias
# Update our OBS settings.
OBS_PREFS_OP_KEY="OBS Settings"
OBS_PREFS_SENTINEL_FILE="$HOME/.config/setup/obs_has_been_setup"
DISABLE_OBS_PREFS_CHECK="${DISABLE_OBS_PREFS_CHECK:-false}" # Should we disable updating /etc/hosts?
FORCE_OBS_PREFS_UPDATE="${FORCE_OBS_PREFS_UPDATE:-false}" # Should we update our /etc/hosts anyway?
OBS_PREFS_TIMESTAMP_FILE="$HOME/.config/obs-prefs-updater/timestamp"
MAX_OBS_PREFS_STALENESS_DAYS=5 # How current should /etc/hosts be?
# Update our local /etc/hosts file to disable tracking, telemetry, and ads.
# Sourced from firebog.net
DISABLE_ADFREE_CHECK="${DISABLE_ADFREE_CHECK:-false}" # Should we disable updating /etc/hosts?
FORCE_ADFREE_UPDATE="${FORCE_ADFREE_UPDATE:-false}" # Should we update our /etc/hosts anyway?
ADFREE_TIMESTAMP_FILE="$HOME/.config/adfree-etchosts/timestamp"
MAX_AD_FREE_STALENESS_DAYS=5 # How current should /etc/hosts be?
ADFREE_ETC_HOSTS_LIST_TEMPLATE_URL=https://github.com/carlosonunez/hosts/releases/download/%DATE%/fb.txt
HOMEBREW_BUILTINS_X86=$(cat <<-APPS
vagrant
virtualbox
APPS
)
HOMEBREW_TAPS=$(cat <<-TAPS
homebrew/cask-drivers
homebrew/cask-fonts
homebrew/cask-versions
TAPS
)
HOMEBREW_BUILTINS=$(cat <<-APPS
1password
1password-cli
alfred
android-platform-tools
authy
awscli
azure-cli
bartender
bash
bash-completion@2
cscope
ctags
colordiff
coreutils
curl
direnv
feh
findutils
font-dejavu-sans-mono-nerd-font
fzf
gawk
gh
git
gnu-getopt
gnu-indent
gnu-sed
gnu-tar
gnutls
grep
brightness
htop
imagemagick
iterm2
keyboardcleantool
make
mas
nightowl
orion
reattach-to-user-namespace
safari-technology-preview
scrcpy
shellcheck
shiftit
sonos
tailscale
the_silver_searcher
tmux
todo-txt
tree
vb-cable
vim
vlc
w3m
witch
xquartz
zoom
APPS
)
APPLE_APP_STORE_APPS=$(cat <<-APPS
APPS
)
ETC_HOSTS_EXCLUSIONS=$(cat <<-EXCLUSIONS
amp-reddit-com\.cdn\.ampproject\.org
analytics\.google\.com
api\.twitter\.com
dynatrace\.com
engineering\.linkedin\.com
i\.redd\.it
i\.reddit\.com
www\.reddit\.com
linkedin\.com
media\.licdn\.com
mmg-fna\.whatsapp\.net
mmg\.whatsapp\.net
preview\.redd\.it
preview\.redd\.it
oauth\.reddit\.com
reddit\.com
old\.reddit\.com
reddit\.map\.fastly\.net
static\.licdn\.com
t\.co
twimg\.com
twitter\.com
v\.redd\.it
whatsapp\.com
whatsapp\.net
www\.licdn\.com
www\.linkedin\.com
www\.redditstatic\.com
www\.t\.co
web\.whatsapp\.com
incoming\.telemetry\.mozilla\.org
whatsapp-.*fbcdn\.net
media-.*whatsapp\.net
mmx-ds\.cdn\.whatsapp\.net
www\.facebook\.com$
fonts\.gstatic\.com$
EXCLUSIONS
)
ETC_HOSTS_INCLUSIONS=$(cat <<-INCLUSIONS
fonts.gstatic.com:142.250.114.94
INCLUSIONS
)
FERMATA_URL="https://github.com/iccir/Fermata/releases/download/Fermata-136/Fermata-136.zip"

check_for_internet_access() {
  test "$(curl -s --connect-timeout 3 http://nil.carlosnunez.me)" == "i love socks."
}

get_homebrew_builtins() { brew list --formula | tr '\t' '\n'; }
get_app_store_apps() { mas list | sed -E 's/^[0-9]+ (.*) \(.*$/\1/'; }

install_if_missing() {
  installed_apps="$1"
  install_command="$2"
  apps="${@:3}"
  for app in $apps
  do
    if ! $(echo "$installed_apps" | grep -q "$app")
    then
      log_info "Installing app: ${BGreen}$app${NC}\n"
      eval "$install_command $app"
    fi
  done
}

is_apple_m1_cpu() {
  grep -iq 'arm' <<< "$(uname -p)"
}

install_homebrew_builtins() {
  # TECH NOTE: There isn't an option to hide warnings because the Homebrew
  # developers don't think that it's necessary, which is sad.
  # https://github.com/Homebrew/brew/issues/2351
  apps="$(echo "$HOMEBREW_BUILTINS" | tr '\n' ' ')"
  if is_apple_m1_cpu
  then
    log_warning "You appear to be using a MacBook with an \
Apple M1 CPU. Install Rosetta first in order to install these apps: \
$(echo "${HOMEBREW_BUILTINS_X86}" | tr '\n' ' ')\n"
  else
    apps="${apps} $(echo "$HOMEBREW_BUILTINS_X86" | tr '\n' ' ')"
  fi

  apps_missing=$(comm -2 <(tr ' ' '\n' <<< "$apps" | sort) <(brew list -1 | sort) |
    grep -Ev '^\t')
  if test -n "$apps_missing"
  then
    log_info "Installing: $(tr '\n' ' ' <<< "$apps_missing")"
    brew install $apps_missing
  fi
}

install_app_store_apps() {
  if &>/dev/null mas account
  then
    install_if_missing "$(get_app_store_apps)" "mas lucky" $APPLE_APP_STORE_APPS
  else
    formatted_apps=$(echo "$APPLE_APP_STORE_APPS" | tr '\n' ' ')
    log_warning "You are not signed in to the App Store. Sign in to install \
these apps: $formatted_apps\n"
  fi
}

modify_etc_hosts() {
  _force() {
    grep -Eiq "^true$" <<< "$FORCE_ADFREE_UPDATE"
  }

  if ! _force
  then
    test -f "$ETC_HOSTS_PREPPED_SENTINEL_FILE" && return 0
  fi

  match_re="0.0.0.0 ($(tr '\n' '%' <<< "$ETC_HOSTS_EXCLUSIONS" | sed 's#%#\|#g; s/.$//g'))$"
  while read -r pattern
  do
    log_info "Removing from /etc/hosts; enter password if prompted: $pattern\n"
    sudo gsed -i "/$pattern/d" /etc/hosts
  done < <(grep -E "$match_re" /etc/hosts) && touch "$ETC_HOSTS_PREPPED_SENTINEL_FILE"
}

add_to_etc_hosts() {
  for domain_ip in $ETC_HOSTS_INCLUSIONS
  do
    domain=$(cut -f1 -d ':' <<< "$domain_ip")
    ip=$(cut -f2 -d ':' <<< "$domain_ip")
    if ! grep -Eq "^${ip}[ \\t]+${domain}$" /etc/hosts
    then
      line="$ip   $domain"
      log_info "Adding to /etc/hosts: $line"
      sudo gsed -i "/${domain}$/d" /etc/hosts
      sudo sh -c "echo '$line' >> /etc/hosts"
    fi
  done
}

make_etc_hosts_adfree() {
  _write_refresh_date_timestamp() {
    test -d "$(dirname "$ADFREE_TIMESTAMP_FILE")" || mkdir "$(dirname "$ADFREE_TIMESTAMP_FILE")"
    date +%s -d "+$MAX_AD_FREE_STALENESS_DAYS days" > "$ADFREE_TIMESTAMP_FILE"
  }

  _get_refresh_date_timestamp() {
    test -f "$ADFREE_TIMESTAMP_FILE" &&
      cat "$ADFREE_TIMESTAMP_FILE" ||
      printf '0'
  }

  _etc_hosts_updated_recently() {
    last_refresh_date="$(_get_refresh_date_timestamp)"
    today="$(date +%s)"
    test "$today" -le "$last_refresh_date"
  }

  _etc_hosts_updating_disabled() {
    grep -Eiq "^true$" <<< "$DISABLE_ADFREE_CHECK"
  }

  _force() {
    grep -Eiq "^true$" <<< "$FORCE_ADFREE_UPDATE"
  }

  _save_original_etc_hosts() {
    if ! test -f /etc/hosts.original
    then
      sudo cp /etc/hosts /etc/hosts.original
    fi
  }

  _adfree_hosts_list() {
    echo "${ADFREE_ETC_HOSTS_LIST_TEMPLATE_URL//%DATE%/$(date +%Y.%m.%d)}"
  }

  if _force || ( ! _etc_hosts_updating_disabled && ! _etc_hosts_updated_recently )
  then
    rm "$ETC_HOSTS_PREPPED_SENTINEL_FILE"
    if _force
    then
      log_info "You've requested /etc/hosts to be refreshed!\n"
    else
      log_info "It's been over $MAX_AD_FREE_STALENESS_DAYS days since /etc/hosts \
has been updated with ad-free extensions. Updating it now.\n"
      log_info "Set DISABLE_ADFREE_CHECK to 'true' to disable this behavior."
    fi
    _save_original_etc_hosts
    log_info "Applying list: $(_adfree_hosts_list)"
    sudo sh -c 'cat /etc/hosts.original > /etc/hosts'
    sudo sh -c 'echo >> /etc/hosts'
    curl -o /tmp/etc_hosts -L "$(_adfree_hosts_list)" &&
      sudo sh -c 'cat /tmp/etc_hosts >> /etc/hosts' &&
      rm -f /tmp/etc_hosts
    _write_refresh_date_timestamp
  fi
}

install_witch_prefs() {
  test -f "$WITCH_PREFS_UPDATED_SENTINEL_FILE" && return 0

  log_info "Applying witch preferences"
  defaults import com.manytricks.witchdaemon "$HOME/src/setup/witch.plist" &&
    touch "$WITCH_PREFS_UPDATED_SENTINEL_FILE"
}

set_vnc_witch_prefs() {
  log_info "Applying VNC-compatible witch preferences"
  killall witch &&
    defaults import com.witch.witch $HOME/src/setup/witch-vnc.plist &&
    open /Applications/witch.app
}

set_regular_witch_prefs() {
  killall witch &&
    rm "$witch_PREFS_UPDATED_SENTINEL_FILE" && install_witch_prefs &&
    open ~/Library/PreferencePanes/Witch.prefPane/Contents/Helpers/witchdaemon.app/Contents/MacOS/witchdaemon
}

install_amethyst_prefs() {
  test -f "$AMETHYST_PREFS_UPDATED_SENTINEL_FILE" && return 0

  log_info "Applying Amethyst preferences"
  defaults import com.amethyst.Amethyst "$HOME/src/setup/amethyst.plist" &&
    touch "$AMETHYST_PREFS_UPDATED_SENTINEL_FILE"
}

set_vnc_amethyst_prefs() {
  log_info "Applying VNC-compatible amethyst preferences"
  killall amethyst &&
    defaults import com.amethyst.Amethyst $HOME/src/setup/amethyst-vnc.plist &&
    open /Applications/amethyst.app
}

set_regular_amethyst_prefs() {
  killall amethyst &&
    rm "$AMETHYST_PREFS_UPDATED_SENTINEL_FILE" && install_amethyst_prefs &&
    open /Applications/Amethyst.app
}

install_shiftit_prefs() {
  test -f "$SHIFTIT_PREFS_UPDATED_SENTINEL_FILE" && return 0

  log_info "Applying ShiftIt preferences"
  defaults import org.shiftitapp.ShiftIt "$HOME/src/setup/shiftit.plist" &&
    touch "$SHIFTIT_PREFS_UPDATED_SENTINEL_FILE"
}

set_vnc_shiftit_prefs() {
  log_info "Applying VNC-compatible ShiftIt preferences"
  killall ShiftIt &&
    defaults import org.shiftitapp.ShiftIt $HOME/src/setup/shiftit-vnc.plist &&
    open /Applications/ShiftIt.app
}

set_regular_shiftit_prefs() {
  killall ShiftIt &&
    rm "$SHIFTIT_PREFS_UPDATED_SENTINEL_FILE" && install_shiftit_prefs &&
    open /Applications/ShiftIt.app
}


configure_todos() {
  if ! test -d $HOME/src/todos
  then
    log_info "Installing shell todos"
    git clone git@github.carlosnunez.me:carlosonunez/todos.git $HOME/src/todos
  fi
}

update_obs_prefs() {
  OBS_PREFS_TMP_FILE="/tmp/obs-studio-prefs.zip"

  _write_refresh_date_timestamp() {
    test -d "$(dirname "$OBS_PREFS_TIMESTAMP_FILE")" || mkdir "$(dirname "$OBS_PREFS_TIMESTAMP_FILE")"
    date +%s > "$OBS_PREFS_TIMESTAMP_FILE"
  }

  _get_refresh_date_timestamp() {
    test -f "$OBS_PREFS_TIMESTAMP_FILE" &&
      cat "$OBS_PREFS_TIMESTAMP_FILE" ||
      printf '0'
  }

  _obs_prefs_updated_recently() {
    test "$(_get_refresh_date_timestamp)" != "0" && \
      test "$(_get_refresh_date_timestamp)" -lt "$(date +%s -d "+$MAX_AD_FREE_STALENESS_DAYS days")"
  }

  _obs_prefs_updating_disabled() {
    grep -Eiq "^true$" <<< "$DISABLE_OBS_PREFS_CHECK"
  }

  _force() {
    grep -Eiq "^true$" <<< "$FORCE_OBS_PREFS_UPDATE"
  }

  _download_and_unzip_obs_prefs() {
    op document get --vault "$OP_DEFAULT_VAULT" "$OBS_PREFS_OP_KEY" >  "$OBS_PREFS_TMP_FILE" &&
      unzip -d "${HOME}/Library/Application Support" "$OBS_PREFS_TMP_FILE" &&
      rm "$OBS_PREFS_TMP_FILE"
  }

  _zip_and_upload_obs_prefs() {
    pushd "${HOME}/Library/Application Support" &&
      zip -q -r "$OBS_PREFS_TMP_FILE" obs-studio &&
      popd
    existing=$(op document list --format=json --vault "$OP_DEFAULT_VAULT" | \
      jq -r '.[].overview.title' | \
      grep "$OBS_PREFS_OP_KEY")
    if test -z "$existing"
    then
      log_info "OBS settings not found in 1Password. Creating it now."
      op document create --vault "$OP_DEFAULT_VAULT" \
        --title "$OBS_PREFS_OP_KEY" \
        "$OBS_PREFS_TMP_FILE"
    else
      op document edit --vault "$OP_DEFAULT_VAULT" \
        "$OBS_PREFS_OP_KEY" \
        "$OBS_PREFS_TMP_FILE"
    fi
    rm "$OBS_PREFS_TMP_FILE"
  }

  if _force || ( ! _obs_prefs_updating_disabled && ! _obs_prefs_updated_recently )
  then
    log_info "It's been over $MAX_OBS_PREFS_STALENESS_DAYS days since OBS prefs have \
been updated. Doing that now."
    log_info "Set DISABLE_OBS_PREFS_CHECK to 'true' to disable this behavior."
    if ! check_for_internet_access
    then
      log_error "Internet seems to be down. Do this manually by running '${FUNCNAME[0]}'"
      return 1
    fi
    if ! test -f "$OBS_PREFS_SENTINEL_FILE"
    then
      log_info "It looks like OBS hasn't been set up yet. Fetching prefs now."
      _download_and_unzip_obs_prefs
      touch "$OBS_PREFS_SENTINEL_FILE"
    else
      _zip_and_upload_obs_prefs
    fi
    _write_refresh_date_timestamp
  fi
}


get_ssh_and_aws_keys_from_onepassword() {
  ssh_folder_not_present_or_empty() {
    # TECH NOTE: executing `find` against an empty directory will only
    # yield the directory itself.
    ! test -d "$HOME/.ssh" || test "$(find $HOME/.ssh)" == "$HOME/.ssh"
  }

  download_keys() {
    op document get "SSH and AWS Keys" --vault "$OP_DEFAULT_VAULT" \
      --output="$HOME/Downloads/keys.zip"
  }

  unzip_keys() {
    unzip -d $HOME/.ssh "$HOME/Downloads/keys.zip"
  }

  permission_keys() {
    grep -Elr "BEGIN (OPENSSH|RSA)" $HOME/.ssh | xargs chmod 600
  }

  import_gpg_keys() {
    gpg --import-ownertrust ~/.ssh/gpg/ownertrust &&
    gpg --import ~/.ssh/gpg/public_keys &&
    gpg --import ~/.ssh/gpg/private_keys
  }

  remove_downloaded_keys() {
    rm "$HOME/Downloads/keys.zip"
  }

  if ssh_folder_not_present_or_empty
  then
    log_info "Downloading and configuring SSH and cloud keys. (You'll be \
asked to provide a passphrase for your GPG keys.)"
    download_keys &&
      unzip_keys &&
      permission_keys &&
      import_gpg_keys &&
      remove_downloaded_keys
  fi
}

get_secret_settings_from_onepassword() {
  SECRET_SETTINGS_SENTINEL_FILE="$HOME/.config/setup/secret_settings_downloaded"
  SECRET_SETTINGS_SENTINEL_DIR=$(dirname "$SECRET_SETTINGS_SENTINEL_FILE")

  secret_settings_installed() {
    test -f "$SECRET_SETTINGS_SENTINEL_FILE"
  }

  mark_secret_settings_as_installed() {
    test -d "$SECRET_SETTINGS_SENTINEL_DIR" || mkdir -p "$SECRET_SETTINGS_SENTINEL_DIR"
    touch "$SECRET_SETTINGS_SENTINEL_FILE"
  }

  download_env_settings() {
    op document get "Secret Environment Settings" --vault "$OP_DEFAULT_VAULT" \
      --output "$HOME/Downloads/environment.zip"
  }

  unzip_env_settings() {
    unzip -d $HOME "$HOME/Downloads/environment.zip"
  }

  remove_downloaded_env_settings() {
    rm "$HOME/Downloads/environment.zip"
  }

  if ! secret_settings_installed
  then
    log_info "Downloading secret environment settings."
    download_env_settings &&
      unzip_env_settings &&
      remove_downloaded_env_settings &&
      mark_secret_settings_as_installed
  fi
}
get_local_firefox_multi_account_containers() {
  cat "$HOME/.ssh/firefox_mac_regexes" | pbcopy
}

get_firefox_multi_account_containers_from_onepassword() {
  ensure_regexes_not_present() {
    ! test -f "$HOME/.ssh/firefox_mac_regexes"
  }

  download_regexes() {
    op item get "Firefox Multi-Account Container Configuration" \
      --vault "$OP_DEFAULT_VAULT" \
      --fields notesPlain >> $HOME/.ssh/firefox_mac_regexes
  }

  install_regexes() {
    log_info "Run this command to copy your Firefox Multi-Account Containers settings. \
Click on 'Containerise' then click the pencil and paste: \
'get_local_firefox_multi_account_containers'"
  }

  if ensure_regexes_not_present
  then
    log_info "Downloading and configuring Firefox Multi-Account Containers."
    download_regexes && install_regexes
  fi
}

update_firefox_multi_account_containers_into_onepassword() {
  prompt_for_containers() {
    log_info "Add your containers below; press CTRL-d when finished."
    cat
  }
  configure_1password_cli
  containers_string=$(prompt_for_containers)
  if ! test -z "$containers_string"
  then
    log_info "Updating 1Password."
    op item edit 'Firefox Multi-Account Container Configuration' notesPlain="$containers_string" \
      --vault "$OP_DEFAULT_VAULT"
  fi
}

installation_is_locked() {
  random_wait_time=$(bc -l <<< "scale=4 ; ${RANDOM}/32767")
  sleep $random_wait_time && test -e "$INSTALL_LOCK_FILE"
}

remove_dead_install_locks() {
  bash_processes_holding_lock() {
    ps -ef | grep bash | grep -q "$(get_bash_process_holding_lock)"
  }
  if installation_is_locked
  then
    if ! bash_processes_holding_lock
    then
      unlock_install
    fi
  fi
}

get_bash_process_holding_lock() {
  cat "$INSTALL_LOCK_FILE"
}

get_tmux_windowpane_holding_lock() {
  tmux list-panes -a -F "#{pane_pid} #{window_name}:#{window_id}-#{pane_id}" | \
    grep "$(get_bash_process_holding_lock)" | \
    cut -f2 -d ' '
}

lock_install() {
  printf $$ > "$INSTALL_LOCK_FILE"
}

unlock_install() {
  rm -f "$INSTALL_LOCK_FILE"
}

install_reddit_cli() {
  if ! tuir --version &>/dev/null
  then
    log_info "Installing Reddit for CLI"
    pip install tuir
  fi
}

tap_casks() {
  missing_taps=$(comm -2 <(sort <<< "$HOMEBREW_TAPS") <(brew tap | sort) |
    grep -Ev '^\t')
  test -z "$missing_taps" && return 0

  log_info "Tapping: $(tr '\n' ' ' <<< "$missing_taps")"
  brew tap $missing_taps
}

enable_sudo_with_apple_watch_and_touch_id() {
  enable_apple_watch() {
    if ! test -f $APPLE_WATCH_PAMID_LIBPATH
    then
      if ! test -d $APPLE_WATCH_PAMID_PATH
      then
        mkdir -p "$APPLE_WATCH_PAMID_PATH" && \
          git clone $APPLE_WATCH_PAMID_URL $APPLE_WATCH_PAMID_PATH
      fi
      log_info "Installing Apple Watch sudo extension. Enter your password when prompted."
      pushd $APPLE_WATCH_PAMID_PATH && \
        gsed -i 's/x86_64/$(shell uname -m)/' Makefile && \
        sudo make install
    fi
    if ! grep -q "pam_watchid.so" /etc/pam.d/sudo
    then
      log_info "Enabling Apple Watch sudo extension. Enter your password when prompted."
      sudo gsed -i '1s/^/auth    sufficient      pam_watchid.so    "reason=execute command as root"\n/' \
        /etc/pam.d/sudo
    fi
    popd &>/dev/null
  }
  enable_touchid() {
    if ! grep -q "pam_tid.so" /etc/pam.d/sudo
    then
      log_info "Enabling Touch ID sudo extension. Enter your password when prompted."
      sudo gsed -i '1s/^/auth    sufficient      pam_tid.so    "reason=execute command as root"\n/' \
        /etc/pam.d/sudo
    fi
  }
  if test "$(get_os_type)" == "Darwin"
  then
    enable_apple_watch && enable_touchid
  fi
}

install_fermata(){ 
  if test "$(get_os_type)" == "Darwin" && ! is_apple_m1_cpu && ! test -d "/Applications/Fermata.app"
  then
    log_info_sudo "Installing Fermata"
    curl -Lso /tmp/fermata.zip "$FERMATA_URL" &&
      unzip -q /tmp/fermata.zip -d /tmp &&
      sudo mv /tmp/Fermata.app /Applications &&
      defaults import "$HOME/src/setup/fermata.plist" ~/Library/Preferences/com.iccir.Fermata.plist
  fi
}

mark_first_time_setup_as_complete_if_needed() {
  file="$HOME/.config/setup/first_time_setup_complete"
  if ! test -f "$file"
  then
    test -d "$(dirname "$file")" || mkdir -p "$(dirname "$file")"
    touch "$file"
    log_info "First time setup complete. Enjoy your machine!"
  fi
}

install_complete_alias() {
  if ! test -f "$HOME/.bash_completion.d/complete_alias"
  then
    log_info "Installing complete_alias"
    mkdir -p "$HOME/.bash_completion.d" &&
      curl "$COMPLETE_ALIAS_URL" > ~/.bash_completion.d/complete_alias
  fi
}

update_bash() {
  if grep -iq "^3" <<< "$BASH_VERSION"
  then
    current_shell="$(dscl . -read /Users/cn shell | awk '{print $NF}')"
    want_shell="$(brew --prefix)/bin/bash)"
    test "${current_shell}" == "${want_shell}" && return 0

    log_info_sudo "Updating Bash (tmux reload required once finished)"
    sudo sh -c "echo $want_shell >> /etc/shells" && \
    chsh -s "$want_shell"
  fi
}

first_time_setup_done() {
  file="$HOME/.config/setup/first_time_setup_complete"
  test -f "$file"
}

if ! first_time_setup_done
then
  log_info_sudo "Welcome to the installer! We'll need to configure 1Password \
first so that we can fetch your secret preferences."
  if ! configure_1password_cli
  then
    log_error "Failed to configure 1Password. This might be because your \
account has two-factor authentication enabled. Run 'source ~/.bash_profile' again, but \
pre-pend this to it: 'ONEPASSWORD_OTP=[YOUR_OTP]'."
    return 1 2>/dev/null
  fi
fi

remove_dead_install_locks
if installation_is_locked
then
  log_warning ".bash_install is installing apps in tmux window-pane \
$(get_tmux_windowpane_holding_lock). Skipping to post-install."
else
  if ! check_for_internet_access
  then
    log_warning "Internet access is not available. We will not attempt to install \
or update apps. To re-attempt manually, run 'source \$HOME/.bash_install'."
    unlock_install
    return 0
  fi

  log_info "Checking and/or updating software. This might take a few minutes."

  lock_install
  tap_casks

  # Install a few necessary brew formulae
  # ======================================
  case "$(get_os_type)" in
    Darwin)
      install_homebrew_builtins &&
      install_app_store_apps;
      install_shiftit_prefs;
      install_witch_prefs;
      install_fermata
          ;;
    *)
      log_warning "Routines for non-Mac operating systems haven't been written yet."
      log_warning "See '$HOME/.bash_install' for a list of applications to install."
      ;;
  esac
  get_ssh_and_aws_keys_from_onepassword
  get_secret_settings_from_onepassword
  get_firefox_multi_account_containers_from_onepassword
  unlock_install
fi

enable_sudo_with_apple_watch_and_touch_id
install_reddit_cli
configure_todos
make_etc_hosts_adfree
modify_etc_hosts
update_obs_prefs
install_complete_alias
update_bash
mark_first_time_setup_as_complete_if_needed

trap - INT
