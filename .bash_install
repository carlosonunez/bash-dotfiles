#!/usr/bin/env bash

check_for_internet_access() {
  test "$(curl -s --connect-timeout 3 http://nil.carlosnunez.me)" == "i love socks."
}

HOMEBREW_BUILTINS=$(cat <<-APPS
todo-txt
gnu-sed
htop
tmux
jq
feh
w3m
reattach-to-user-namespace
tree
mas
rtv
googler
docker-compose-completion
imagemagick
scrcpy
nightowl
git
bash-completion
APPS
)
HOMEBREW_CASKS=$(cat <<-APPS
shiftit
iterm2
1password
authy
xquartz
contexts
alfred
android-platform-tools
APPS
)
APPLE_STORE_APPS=$(cat <<-APPS
spark
shush
APPS
)
ETC_HOSTS_EXCLUSIONS=$(cat <<-EXCLUSIONS
web\.whatsapp\.com
twitter\.com
t\.co
www\.t\.co
.*\.twimg\.com
www\.linkedin\.com
linkedin\.com
api\.twitter\.com
.*reddit\.com
v\.redd\.it
amp-reddit-com\.cdn\.ampproject\.org
www\.redditstatic\.com
i\.reddit\.com
i\.redd\.it
mmg\.whatsapp\.net
reddit\.map\.fastly\.net
media\.licdn\.com
mmg-fna\.whatsapp\.net
analytics\.google\.com
static\.licdn\.com
www\.licdn\.com
EXCLUSIONS
)
ETC_HOSTS_INCLUSIONS=$(cat <<-ETC_HOSTS_INCLUSIONS
ads\.linkedin\.com
ETC_HOSTS_INCLUSIONS
)

modify_etc_hosts() {
  index=0
  inclusions=$(echo "$ETC_HOSTS_INCLUSIONS" | tr '\n' '|' | head -c -1)
  for exclusion in $ETC_HOSTS_EXCLUSIONS
  do
    exclusion_pretty_print="$(echo "$exclusion" | sed 's/\\././g')"
    pattern="^0.0.0.0 $exclusion$"
    if echo "$pattern" | grep -Eq "$inclusions"
    then
      message="INFO: Leaving in /etc/hosts - $exclusion_pretty_print"
      continue
    elif grep -Eq "$pattern" /etc/hosts
    then
      message="INFO: Removing from /etc/hosts - $exclusion_pretty_print"
      if test "$index" -eq 0
      then
        message="${message} (you might need to enter your password)"
      fi
      >&2 echo "$message"
      sudo gsed -i "/$pattern/d" /etc/hosts
      index=$((index+1))
    fi
  done
}

make_etc_hosts_adfree() {
  if ! grep -q 'StevenBlack' /etc/hosts
  then
    >&2 echo "INFO: Updating /etc/hosts with ad-free extensions"
    sudo curl -o /etc/hosts -L http://sbc.io/hosts/alternates/fakenews-social/hosts
  fi
}

install_contexts_prefs() {
  cp ~/src/setup/com.contextsformac.Contexts.plist ~/Library/Preferences
}

install_shiftit_prefs() {
  defaults import org.shiftitapp.ShiftIt $HOME/src/setup/shiftit.plist
}

configure_todos() {
  if ! test -d $HOME/src/todos
  then
    git clone git@github.carlosnunez.me:carlosonunez/todos.git $HOME/src/todos
  fi
}

# Install NERD fonts and icons
# =============================
if ! brew cask list font-dejavusansmono-nerd-font &>/dev/null
then
  brew tap caskroom/fonts && brew cask install font-dejavusansmono-nerd-font
fi


# Install a few necessary brew formulae
# ======================================
if ! check_for_internet_access
then
  >&2 echo "WARN: Internet access is not available. We will not attempt to install
or update apps. To re-attempt manually, run 'source \$HOME/.bash_install'."
  return 0
fi

installed_applications=$(brew list --full-name; \
  brew cask list --full-name 2>/dev/null; \
  find '/Applications' -maxdepth 1 \
    -name "*.app" \
    -exec sh -c 'basename "{}" | sed "s#\.app##" | tr "[:upper:]" "[:lower:]"' \;)
[ "$(uname)" == "Darwin" ] && {
  for pkg in $HOMEBREW_BUILTINS; do
    if ! $(echo "$installed_applications" | grep -q "$pkg")
    then
      echo "INFO: Installing: $pkg"
      install_application "$pkg"
    fi
  done
  for pkg in $HOMEBREW_CASKS; do
    if ! $(echo "$installed_applications" | grep -q "$pkg")
    then
      echo "INFO: Installing: $pkg"
      brew cask install "$pkg"
    fi
  done
  for pkg in $APPLE_STORE_APPS
  do
    if ! mas list | tr '[:upper:]' '[:lower:]' | grep -q "$pkg"
    then
      mas lucky "$pkg"
    fi
  done

  install_shiftit_prefs
  install_contexts_prefs
  configure_todos
  make_etc_hosts_adfree
  modify_etc_hosts
}

# Export a few handy exports
# ==========================
