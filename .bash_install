#!/usr/bin/env bash
INSTALL_LOCK_FILE="$HOME/.bash_install_lock"
HOMEBREW_BUILTINS=$(cat <<-APPS
awscli
azure-cli
bash-completion
docker-compose-completion
docker-credential-helper
feh
gh
git
gnu-sed
googler
htop
imagemagick
jq
mas
make
reattach-to-user-namespace
ruby
scrcpy
tmux
todo-txt
tree
vim
w3m
APPS
)
HOMEBREW_CASKS=$(cat <<-APPS
1password
1password-cli
alfred
android-platform-tools
authy
contexts
firefox
font-dejavu-sans-mono-nerd-font
keyboardcleantool
iterm2
shiftit
xquartz
docker
vagrant
virtualbox
vlc
APPS
)
APPLE_APP_STORE_APPS=$(cat <<-APPS
Spark
Shush
APPS
)
ETC_HOSTS_EXCLUSIONS=$(cat <<-EXCLUSIONS
.*\.whatsapp\.com
.*\.whatsapp\.net
twitter\.com
t\.co
www\.t\.co
.*\.twimg\.com
www\.linkedin\.com
engineering\.linkedin\.com
linkedin\.com
api\.twitter\.com
.*reddit\.com
v\.redd\.it
amp-reddit-com\.cdn\.ampproject\.org
www\.redditstatic\.com
i\.reddit\.com
i\.redd\.it
mmg\.whatsapp\.net
reddit\.map\.fastly\.net
media\.licdn\.com
mmg-fna\.whatsapp\.net
analytics\.google\.com
static\.licdn\.com
www\.licdn\.com
dynatrace\.com
EXCLUSIONS
)
ETC_HOSTS_INCLUSIONS=$(cat <<-ETC_HOSTS_INCLUSIONS
ads\.linkedin\.com
ETC_HOSTS_INCLUSIONS
)

check_for_internet_access() {
  test "$(curl -s --connect-timeout 3 http://nil.carlosnunez.me)" == "i love socks."
}

get_homebrew_builtins() { brew list --formula | tr '\t' '\n'; }
get_homebrew_casks() { brew list --cask | tr '\t' '\n'; }
get_app_store_apps() { mas list | sed -E 's/^[0-9]+ (.*) \(.*$/\1/'; }

install_if_missing() {
  app_to_find="$1"
  installed_apps="$2"
  install_command="$3"
  apps="${@:4}"
  for app in $apps
  do
    if ! $(echo "$installed_apps" | grep -q "$app")
    then
      printf "${BYellow}INFO${NC}: Installing app: ${BGreen}$app${NC}\n"
      eval "$install_command $app"
    fi
  done
}

install_homebrew_builtins() {
  install_if_missing "$pkg" "$(get_homebrew_builtins)" "brew install" $HOMEBREW_BUILTINS
}

install_homebrew_casks() {
  install_if_missing "$pkg" "$(get_homebrew_casks)" "brew cask install" $HOMEBREW_CASKS
}

install_app_store_apps() {
  if &>/dev/null mas account
  then
    install_if_missing "$pkg" "$(get_app_store_apps)" "mas lucky" $APPLE_APP_STORE_APPS
  else
    formatted_apps=$(echo "$APPLE_APP_STORE_APPS" | tr '\n' ' ')
    >&2 printf "${BCyan}WARNING${NC}: You are not signed in to the App Store. \
Sign in to install these apps: $formatted_apps\n"
  fi
}

modify_etc_hosts() {
  index=0
  inclusions=$(echo "$ETC_HOSTS_INCLUSIONS" | tr '\n' '|' | head -c -1)
  for exclusion in $ETC_HOSTS_EXCLUSIONS
  do
    exclusion_pretty_print="$(echo "$exclusion" | sed 's/\\././g')"
    pattern="^0.0.0.0 $exclusion$"
    if echo "$pattern" | grep -Eq "$inclusions"
    then
      message="INFO: Leaving in /etc/hosts - $exclusion_pretty_print"
      continue
    elif grep -Eq "$pattern" /etc/hosts
    then
      message="INFO: Removing from /etc/hosts - $exclusion_pretty_print"
      if test "$index" -eq 0
      then
        message="${message} (you might need to enter your password)"
      fi
      >&2 echo "$message"
      sudo gsed -i "/$pattern/d" /etc/hosts
      index=$((index+1))
    fi
  done
}

make_etc_hosts_adfree() {
  if ! grep -q 'StevenBlack' /etc/hosts
  then
    >&2 echo "INFO: Updating /etc/hosts with ad-free extensions"
    sudo curl -o /etc/hosts -L http://sbc.io/hosts/alternates/fakenews-social/hosts
  fi
}

install_contexts_prefs() {
  cp ~/src/setup/com.contextsformac.Contexts.plist ~/Library/Preferences
}

install_shiftit_prefs() {
  defaults import org.shiftitapp.ShiftIt $HOME/src/setup/shiftit.plist
}

configure_todos() {
  if ! test -d $HOME/src/todos
  then
    git clone git@github.carlosnunez.me:carlosonunez/todos.git $HOME/src/todos
  fi
}

generate_and_save_onepass_token() {
  account_email="$1"
  verify_that_we_are_on_a_mac() {
    if ! test "$(get_os_type)" == "Darwin"
    then
      >&2 echo "WARNING: 1Password CLI is not supported on $(get_os_type) yet."
      return 0
    fi
  }

  sign_in() {
    email="$1"
    if ! test -z "$email"
    then
      export OP_SESSION_my=$(op signin my -r $email)
    else
      export OP_SESSION_my=$(op signin my -r)
    fi
  }

  save_op_token_to_keychain() {
    >&2 echo "INFO: Saving 1Password token to your Keychain. Enter your system \
password if prompted."
    security add-generic-password -a "$USER" \
      -s "1password_cli_token"  \
      -w "$OP_SESSION_my" \
      -U
  }

  verify_that_we_are_on_a_mac
  sign_in "$account_email" && save_op_token_to_keychain
}

get_ssh_and_aws_keys_from_onepassword() {
  ssh_folder_not_present_or_empty() {
    # TECH NOTE: executing `find` against an empty directory will only
    # yield the directory itself.
    ! test -d "$HOME/.ssh" || test "$(find $HOME/.ssh)" == "$HOME/.ssh"
  }

  download_keys() {
    op get document "SSH and AWS Keys" \
      --vault "Carlos's Personal Vault" >> $HOME/Downloads/keys.zip
  }

  unzip_keys() {
    unzip -d $HOME/.ssh "$HOME/Downloads/keys.zip"
  }

  permission_keys() {
    grep -Elr "BEGIN (OPENSSH|RSA)" $HOME/.ssh | xargs chmod 600
  }

  remove_downloaded_keys() {
    rm "$HOME/Downloads/keys.zip"
  }

  if ssh_folder_not_present_or_empty
  then
    >&2 echo "INFO: Downloading and configuring SSH and cloud keys."
    download_keys && unzip_keys && permission_keys && remove_downloaded_keys
  fi
}

get_local_firefox_multi_account_containers() {
  cat "$HOME/.ssh/firefox_mac_regexes" | pbcopy
}

get_firefox_multi_account_containers_from_onepassword() {
  ensure_regexes_not_present() {
    ! test -f "$HOME/.ssh/firefox_mac_regexes"
  }

  download_regexes() {
    op get item "Firefox Multi-Account Container Configuration" \
      --vault "Carlos's Personal Vault" \
      --fields notesPlain >> $HOME/.ssh/firefox_mac_regexes
  }

  install_regexes() {
    >&2 echo "INFO: Run this command to copy your Firefox Multi-Account Containers settings. \
Click on 'Containerise' then click the pencil and paste: \
'get_local_firefox_multi_account_containers'"
  }

  if ensure_regexes_not_present
  then
    >&2 echo "INFO: Downloading and configuring Firefox Multi-Account Containers."
    download_regexes && install_regexes
  fi
}

update_firefox_multi_account_containers_into_onepassword() {
  prompt_for_containers() {
    >&2 echo "INFO: Add your containers below; press CTRL-d when finished."
    cat
  }
  configure_1password_cli
  containers_string=$(prompt_for_containers)
  if ! test -z "$containers_string"
  then
    >&2 echo "INFO: Updating 1Password."
    op edit item 'Firefox Multi-Account Container Configuration' notesPlain="$containers_string"
  fi
}

configure_1password_cli() {
  verify_that_we_are_on_a_mac() {
    if ! test "$(get_os_type)" == "Darwin"
    then
      >&2 echo "WARNING: 1Password CLI is not supported on $(get_os_type) yet."
      return 0
    fi
  }

  onepass_has_not_been_run_before() {
    ! test -d "$HOME/.config/op"
  }

  run_first_time_setup() {
    read -p "INFO: It looks like the 1Password CLI hasn't been set up on this \
system before. Enter your 1Password email address to configure it now: " onepass_email
    generate_and_save_onepass_token "$onepass_email"
  }

  is_onepass_token_valid() {
    token="$1"
    op confirm --all --session "$token" &>/dev/null
  }

  get_onepass_token() {
    security find-generic-password -a "$USER" -s "1password_cli_token" -w
  }

  verify_that_we_are_on_a_mac
  if onepass_has_not_been_run_before
  then
    run_first_time_setup
  else
    token=$(get_onepass_token)
    if ! is_onepass_token_valid "$token"
    then
      generate_and_save_onepass_token
    else
      export OP_SESSION_my=$token
    fi
  fi
}

install_lock_open() {
  random_wait_time=$(bc -l <<< "scale=4 ; ${RANDOM}/32767")
  sleep $random_wait_time && ! test -e "$INSTALL_LOCK_FILE"
}

lock_install() {
  touch "$INSTALL_LOCK_FILE"
}

unlock_install() {
  rm -f "$INSTALL_LOCK_FILE"
}

install_reddit_cli() {
  if ! tuir --version &>/dev/null
  then
    pip install tuir
  fi
}

tap_caskroom_fonts() {
  if ! brew tap | grep -q "homebrew/cask-fonts"
  then
    brew tap homebrew/cask-fonts
  fi
}

if ! install_lock_open
then
  >&2 printf "${BRed}ERROR${NC}: .bash_install is installing apps in another window or pane. \
Skipping to post-install.\n"
else
  >&2 printf "${BGreen}INFO${NC}: Checking and/or updating software. This might take a few minutes.\n"
  lock_install
  tap_caskroom_fonts

  # Install a few necessary brew formulae
  # ======================================
  if ! check_for_internet_access
  then
    >&2 echo "WARN: Internet access is not available. We will not attempt to install
  or update apps. To re-attempt manually, run 'source \$HOME/.bash_install'."
    unlock_install
    return 0
  fi

  case "$(get_os_type)" in
    Darwin)
      install_homebrew_builtins &&
      install_homebrew_casks &&
      install_app_store_apps &&
      install_shiftit_prefs &&
      install_contexts_prefs
          ;;
    *)
      >&2 echo "WARNING: Routines for non-Mac operating systems haven't been written yet."
      >&2 echo "WARNING: See '$HOME/.bash_install' for a list of applications to install."
      ;;
  esac
  configure_1password_cli
  get_ssh_and_aws_keys_from_onepassword
  get_firefox_multi_account_containers_from_onepassword
  unlock_install
fi

>&2 printf "${BGreen}INFO${NC}: Configuring system; please wait.\n"
install_reddit_cli
configure_todos
make_etc_hosts_adfree
modify_etc_hosts
