#!/usr/bin/env bash
#vi: set ft=bash:
export DEFAULT_AWS_REGION=us-east-2
AWS_ROLE_INFO_OP_ITEM_NAME="AWS Admin Role Information"
AWS_TOKEN_CACHE_LOCATION="$HOME/.config/aws"
AWS_OP_VAULT="${AWS_OP_VAULT:-$OP_DEFAULT_VAULT}"

assume_role() {
  _get_session_json() {
    arn="$1"
    password="$2"
    session_name="awscli-session-$(date +%s)"
    if ! test -z "$password"
    then
      aws sts assume-role --role-arn "$arn" --external-id "$password" \
        --role-session-name "$session_name"
    else
      aws sts assume-role --role-arn "$arn" --external-id "$password" \
        --role-session-name "$session_name"
    fi
  }

  _print_env() {
    json="$1"
    access_key=$(jq -r .Credentials.AccessKeyId <<< "$json")
    secret_key=$(jq -r .Credentials.SecretAccessKey <<< "$json")
    session_token=$(jq -r .Credentials.SessionToken <<< "$json")
   
    echo "# Run these commands"
    echo "export AWS_ACCESS_KEY_ID=$access_key"
    echo "export AWS_SECRET_ACCESS_KEY=$secret_key"
    echo "export AWS_SESSION_TOKEN=$session_token"
  }

  _get_expiration() {
    json="$1"
    jq -r .Credentials.Expiration <<< "$json"
  }


  _write_token_info() {
    json="$1"
    arn=$(jq -r .AssumedRoleUser.Arn <<< "$json")
    expiration=$(jq -r .Credentials.Expiration <<< "$json")
    expiration_sec=$(date -d "$expiration" +%s)
    printf '{"arn": "%s", "expiration": "%d"}' "$arn" "$expiration_sec" | \
      jq -cr . >  "${AWS_TOKEN_CACHE_LOCATION}/sts_info"
  }

  _create_cache_if_needed() {
    test -d "$AWS_TOKEN_CACHE_LOCATION" || mkdir -p "$AWS_TOKEN_CACHE_LOCATION"
  }

  arn="${1?Please provide an ARN for a role to assume.}"
  password="$2"
  json=$(_get_session_json "$arn" "$password")
  _create_cache_if_needed
  if test -z "$json"
  then
    log_error "Unable to assume [$arn] with external ID [$password]; see \
above."
    return 1
  fi
  _write_token_info "$json"
  _print_env "$json"
}

_log_into_aws() {
  _session_token_valid() {
    sts_info="${AWS_TOKEN_CACHE_LOCATION}/sts_info"
    ! test -e "$sts_info" && return 1

    expired_on=$(jq -r .expiration "$sts_info")
    now=$(date +%s)
    test "$expired_on" -gt "$now"
  }

  _region() {
    if ! test -z "$AWS_REGION"
    then
      echo "$AWS_REGION"
    else
      region="$(get_password_field "$AWS_ROLE_INFO_OP_ITEM_NAME" "region" "$AWS_OP_VAULT")"
      if test -z "$region" || test "$region" == "no password found"
      then
        echo "$DEFAULT_AWS_REGION"
      else
        echo "$region"
      fi
    fi
  }

  if _session_token_valid
  then
    log_error "The session in the environment is still valid."
    log_error "Delete $AWS_TOKEN_CACHE_LOCATION to recreate it."
    return 0
  fi

  access_key="${1:-$(get_password_field "$AWS_ROLE_INFO_OP_ITEM_NAME" "access_key" "$AWS_OP_VAULT")}"
  secret_key="${2:-$(get_password_field "$AWS_ROLE_INFO_OP_ITEM_NAME" "secret_key" "$AWS_OP_VAULT")}"
  if test -z "$access_key" || test -z "$secret_key"
  then
    log_error "Please provide an AWS access key or secret key."
    return 1
  fi
  unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY  AWS_SESSION_TOKEN
  export AWS_ACCESS_KEY_ID="$access_key"
  export AWS_SECRET_ACCESS_KEY="$secret_key"
  region="$(_region)"
  export AWS_REGION="$region"
  arn="${3:-$(get_password_field "$AWS_ROLE_INFO_OP_ITEM_NAME" "arn" "$AWS_OP_VAULT")}"
  external_id="${4:-$(get_password_field "$AWS_ROLE_INFO_OP_ITEM_NAME" "external_id" "$AWS_OP_VAULT")}"
  if ! test -z "$arn" && ! test -z "$external_id"
  then
    assume_role "$arn" "$external_id"
  fi
}

alias log_into_aws_with_op='configure_1password_cli && 1>/dev/null export $(_log_into_aws | grep -E "^export AWS" | xargs -0)'
alias aws_login=log_into_aws_with_op


log_info "AWS shell extensions configured! Run 'aws_login' to log into AWS with 1Password."
complete -C '/usr/local/bin/aws_completer' aws
