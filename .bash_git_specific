#!/usr/bin/env bash
[ -f "$HOME/src/setup/completions/git.bash" ] && source "$HOME/src/setup/completions/git.bash"

GITHUB_SSH_KEY="$HOME/.ssh/github"
DEFAULT_GIT_AUTHOR_NAME="Carlos Nunez"
DEFAULT_GIT_AUTHOR_EMAIL="13461447+carlosonunez@users.noreply.github.com"

alias a="git add . -N"
alias c="test -n \${GITHUB_SIGNING_KEY?GITHUB_SIGNING_KEY not found in your environment; please export it} && git cs"
alias ce="test -n \${GITHUB_SIGNING_KEY?GITHUB_SIGNING_KEY not found in your environment; please export it} && git cs --allow-empty"
alias cm="test -n \${GITHUB_SIGNING_KEY?GITHUB_SIGNING_KEY not found in your environment; please export it} && git cs -m"
alias commit="git -c commit.gpgsign=false commit"
alias commitm="git -c commit.gpgsign=false commit -m"
alias p="git add -p"
alias st="git status"
alias r="squash_outstanding_commits"
alias f="git fs"
alias sq="git -c sequence.editor=: rebase --autosquash --interactive"
alias squash="git -c sequence.editor=: -c commit.gpgsign=false rebase --autosquash --interactive"
alias push="sq && git push"
alias pushnosign="squash && git push"
alias pull="git pull --rebase"

branch() {
  git branch --show-current
}

dont_use_master_for_default_branches() {
  git config --global init.defaultBranch main
}

view_unpushed_commits_across_branches() {
  # Thanks, StackOverflow!
  # https://stackoverflow.com/a/20499690/314212
  git for-each-ref --format="%(refname:short) %(upstream:track)" refs/heads
}

update_origin_url() {
  if grep -q 'url = http.*github.com' .git/config
  then
    # match repos cloned by http
    gsed -i 's/url = http.*github.com\//url = git@github.carlosnunez.me:/' .git/config
  elif grep -q 'url = git@github.com' .git/config
  then
    # match repos cloned by ssh
    gsed -i 's/git@github.com/git@github.carlosnunez.me/' .git/config
  else
    log_error "Unsupported clone scheme detected."
  fi
}

create_new_git_branch() {
  branch_name="${1?Please provide a Git branch to create.}"
  upstream="${2:-origin}"
  git checkout -b "$branch_name" && git push -u "$upstream" "$branch_name"
}

refresh_github_ssh_key() {
  if [ "$(ssh-add -l | grep '.github')" == "" ]
  then
    eval $(ssh-agent -s) > /dev/null
    ssh-add "$GITHUB_SSH_KEY" > /dev/null
  fi
}

is_current_directory_tracked_by_git() {
  [ "$(git rev-parse --git-dir 2>/dev/null)" != "" ]
}

get_current_branch_name() {
  git rev-parse --abbrev-ref HEAD 2>/dev/null
}

get_number_of_commits_ahead_of_origin() {
  current_branch="$(get_current_branch_name)"
  _get_number_of_commits_between_refs "origin/$current_branch..$current_branch"
}

squash_commits_starting_from_root() {
  git rebase -i --root
}

squash_outstanding_commits() {
  _squash_commits "$(get_number_of_commits_ahead_of_origin)"
}
alias reorder_commits='squash_outstanding_commits'

squash_these_many_commits() {
  number_of_commits_to_squash="$1"
  if [ "$number_of_commits_to_squash" != "" ] &&
    [ "$number_of_commits_to_squash" -gt 0 ]
  then
    _squash_commits "$number_of_commits_to_squash"
    log_info "You might need to force-push this changeset into your remote. \
To do so, use \`git push -f\`. Note that not every repository will allow you \
to do this."
  else
    log_error "Please enter the number of commits to squash."
    return 1
  fi
}

_squash_commits() {
  number_of_commits_to_squash="$1"
  if is_current_directory_tracked_by_git &&
    [ "$number_of_commits_to_squash" != "" ]
  then
    git rebase --allow-empty -i "HEAD~$number_of_commits_to_squash"
  fi
}

_get_number_of_commits_between_refs() {
  git log --pretty=oneline "$1" 2>/dev/null | wc -l | tr -d ' '
}

remove_orig_files() {
  git status --porcelain | grep '.orig' | cut -f2 -d ' ' | xargs rm
}

dont_use_master_for_default_branches
