#!/usr/bin/env bash
GITHUB_SSH_KEY="$HOME/.ssh/github"
GIT_DEFAULT_AUTHOR="${GIT_DEFAULT_AUTHOR:-Carlos Nunez}"
GIT_DEFAULT_EMAIL="${GIT_DEFAULT_EMAIL:-carlosonunez@noreply.github.com}"

dont_use_master_for_default_branches() {
  git config --global init.defaultBranch main
}

set_global_git_configs() {
  git config --global diff.tool vimdiff
}

set_git_author() {
  if ! test -z "$WORK_GIT_AUTHOR" && ! test -z "$WORK_GIT_EMAIL"
  then
    author="$WORK_GIT_AUTHOR"
    email="$WORK_GIT_EMAIL"
  elif ! test -z "$CLIENT_GIT_AUTHOR" && ! test -z "$CLIENT_GIT_EMAIL"
  then
    author="$CLIENT_GIT_AUTHOR"
    email="$CLIENT_GIT_EMAIL"
  else
    author="$GIT_DEFAULT_AUTHOR"
    email="$GIT_DEFAULT_EMAIL"
  fi
  git config --global user.name "$author"
  git config --global user.email "$email"
}

view_unpushed_commits_across_branches() {
  # Thanks, StackOverflow!
  # https://stackoverflow.com/a/20499690/314212
  git for-each-ref --format="%(refname:short) %(upstream:track)" refs/heads
}

update_origin_url() {
  if grep -q 'url = http.*github.com' .git/config
  then
    # match repos cloned by http
    gsed -i 's/url = http.*github.com\//url = git@github.carlosnunez.me:/' .git/config
  elif grep -q 'url = git@github.com' .git/config
  then
    # match repos cloned by ssh
    gsed -i 's/git@github.com/git@github.carlosnunez.me/' .git/config
  else
    >&2 echo "ERROR: Unsupported clone scheme detected."
  fi
}

create_new_git_branch() {
  branch_name="${1?Please provide a Git branch to create.}"
  upstream="${2:-origin}"
  git checkout -b "$branch_name" && git push -u "$upstream" "$branch_name"
}

try_to_install_hub_if_not_found() {
  if ! which hub &> /dev/null
  then
    case $(get_os_type) in
      "Darwin"|"Fedora")
        install_application 'hub'
        ;;
      "Ubuntu")
        sudo add-apt-repository ppa:cpick/hub &&
          sudo apt-get update &&
          sudo apt-get install hub
          ;;
      *)
        >&2 echo "WARNING: Unable to install 'hub' onto $(get_os_type). Compile it manually."
    esac
  fi
}

refresh_github_ssh_key() {
  if [ "$(ssh-add -l | grep '.github')" == "" ]
  then
    eval $(ssh-agent -s) > /dev/null
    ssh-add "$GITHUB_SSH_KEY" > /dev/null
  fi
}

is_current_directory_tracked_by_git() {
  [ "$(git rev-parse --git-dir 2>/dev/null)" != "" ]
}

get_current_branch_name() {
  git rev-parse --abbrev-ref HEAD 2>/dev/null
}

get_number_of_commits_ahead_of_origin() {
  current_branch="$(get_current_branch_name)"
  _get_number_of_commits_between_refs "origin/$current_branch..$current_branch"
}

squash_commits_starting_from() {
  commit_ref="$1"
  if [ "$commit_ref" != "" ]
  then
    _squash_commits $(_get_number_of_commits_between_refs "$commit_ref~1..HEAD")
  fi
}

squash_outstanding_commits() {
  _squash_commits "$(get_number_of_commits_ahead_of_origin)"
}

squash_these_many_commits() {
  number_of_commits_to_squash="$1"
  if [ "$number_of_commits_to_squash" != "" ] &&
    [ "$number_of_commits_to_squash" -gt 0 ]
  then
    _squash_commits "$number_of_commits_to_squash"
    echo "INFO: You might need to force-push this changeset into your remote. \
To do so, use \`git push -f\`. Note that not every repository will allow you \
to do this."
  else
    echo "ERROR: Please enter the number of commits to squash." >&2
    exit 1
  fi
}

_squash_commits() {
  number_of_commits_to_squash="$1"
  if is_current_directory_tracked_by_git &&
    [ "$number_of_commits_to_squash" != "" ]
  then
    git rebase --allow-empty -i "HEAD~$number_of_commits_to_squash"
  fi
}

_get_number_of_commits_between_refs() {
  git log --pretty=oneline "$1" 2>/dev/null | wc -l | tr -d ' '
}

try_to_install_hub_if_not_found
set_git_author
set_global_git_configs
dont_use_master_for_default_branches
